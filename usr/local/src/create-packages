#! /usr/bin/env bash

# script fro creating DEB and RPM packages of the ece-install and ece
# scripts.

# by tkj@vizrt.com

target_dir=target
package_name=escenic-content-engine-installer
package_version=$(date +%Y-%m-%d.%H%M%S)

function clean_up() {
  rm -rf $target_dir
}

function get_user_options() {
  while getopts ":p:r:" opt; do
    case $opt in
      r)
        package_version=${OPTARG}
        ;;
      p)
        package_name=${OPTARG}
        ;;
      \?)
        echo "Invalid option: -$OPTARG" >&2
        exit 1
        ;;
      :)
        echo "Option -$OPTARG requires an argument." >&2
        exit 1
        ;;
    esac
  done
  
}

function set_up_target_directory() {
  mkdir -p $target_dir/{etc,usr,/etc/default}
  mkdir -p $target_dir/usr/{bin,sbin,share/doc}
  
  if [[ $package_name == "escenic-content-engine-installer" ]]; then
    mkdir -p $target_dir/usr/share/doc/escenic
    
    cp -r ../../sbin/{ece-install,drop-and-create-ecedb} $target_dir/usr/sbin/
    cp -r ../../share/escenic/ $target_dir/usr/share/
    cp -r ../../share/doc/escenic/ece-install-guide.{org,html} \
      $target_dir/usr/share/doc/escenic
    
  elif [[ $package_name == "escenic-content-engine-scripts" ]]; then
    mkdir -p $target_dir/usr/share/doc/escenic
    mkdir -p $target_dir/usr/share/escenic/ece-scripts
    
    cp -r ../../bin/{ece,system-info} $target_dir/usr/bin/
    cp -r ../../share/escenic/ece-scripts/common* \
      $target_dir/usr/share/escenic/ece-scripts/
    cp -r ../../share/doc/escenic/{ece,system-info}-guide.{org,html} \
      $target_dir/usr/share/doc/escenic
    cp -r ../../../etc/escenic/ $target_dir/etc/
    cp -r ../../../etc/default/ece $target_dir/etc/default
    
  elif [[ $package_name == "vosa" ]]; then
    mkdir -p $target_dir/usr/share/doc/vosa
    
    cp -r ../../bin/vosa $target_dir/usr/bin/
    cp -r ../../share/vizrt/ $target_dir/usr/share/
    cp -r ../../share/doc/vizrt/*.org $target_dir/usr/share/doc/vosa/
  fi

  debian_dir=$target_dir/DEBIAN
  mkdir -p $debian_dir
  cp debian/${package_name}/* $debian_dir
}

function get_name() {
  name=$(grep $USER /etc/passwd | cut -d':' -f5 | cut -d',' -f1)
  echo "${name}"
}

function get_email() {
  echo ${USER}@${HOSTNAME}
}

function create_packages() {
  sed -i "s#VERSION#${package_version}#g" $debian_dir/control
  sed -i "s#MAINTAINER_NAME#$(get_name)#g" $debian_dir/control
  sed -i "s#MAINTAINER_EMAIL#$(get_email)#g" $debian_dir/control

  # fix permissions
  if [ -e $debian_dir/postinst ]; then
    chmod 755 $debian_dir/postinst
  fi
  
  if [ ! -x /usr/bin/dpkg-deb ]; then
    echo "You must have dpkg-deb installed :-("
    exit 1
  fi

  dpkg-deb --build $target_dir \
    2>&1 > /dev/null
  mv ${target_dir}.deb $target_dir/${package_name}-${package_version}.deb
  
  if [[ -x /usr/bin/alien && -x /usr/bin/fakeroot ]]; then
    (
      cd $target_dir
      fakeroot alien --to-rpm --scripts \
        ${package_name}-${package_version}.deb \
        2>&1 > /dev/null
    )
  else
    echo "You must have 'alien' and 'fakeroot' installed to create RPMs"
    exit 1
  fi
}  

function list_packages() {
  echo "Sir, the packages are now ready:"
  ls $target_dir/*.{deb,rpm}
}

clean_up
get_user_options $@
set_up_target_directory
create_packages
list_packages
