Welcome to the /usr/sbin/ece-install Guide

* Supported Operating Systems
For the best experience, run this script on Debian Squeeze (or newer),
the latest Ubuntu LTS or most other Debian based operating systems,
but it should work without any problems on any Unix like system that
has a recent version of BASH.

*** Debian based operating systems
If running on a Debian based operating system, ece-install will take
care of installing all required third party software, such as database
& caching server.

*** Other GNU/Linux and Unix systems 
If you're installing on another Linux or Unix system, you must first
make sure that these 3rd party components are installed. ece-install
will tell you which ones it cannot find and tell you to install these,
so you can simply run it to find out which ones you need.

You may also look inside the ece-install script for all calls to the
'assert\_pre\_prequesite' method and you'll get a list of the binaries
ece-install assumes are present.

* A Note on Running ece-install On Non-GNU/Linux Systems
Please note, it's assumed that the OS uses GNU's tools, i.e. find, cp
& tar. If you're running a system which has a different set of core
tools, such as any of the BSDs (including Mac OS X) or Solaris, make
sure that GNU's tools take precedence in the command PATH offered to
ece-install.

* Downloading the ece-install Script
The ece-install script can be downloaded from:
https://raw.github.com/skybert/ece-scripts/master/usr/sbin/ece-install
or be downloaded together with the other ece-scripts using git:
#+BEGIN_SRC sh
$ git clone git@github.com:skybert/ece-scripts.git
#+END_SRC

* Running the ece-install Script
You must run the script as the root user.  If you start the script as
a regular user, it will complain:
#+BEGIN_SRC sh
[ece-install] You must be root when running ece-install
#+END_SRC
To become root on Ubuntu based systems and Mac OS X, do:
#+BEGIN_SRC sh
   $ sudo su
#+END_SRC
On all other Unix like system, do:
#+BEGIN_SRC sh
   $ su
#+END_SRC

You will need access to http://technet.escenic.com and put these
credentials in the root user's $HOME/.ece-install.conf, normally this
means /root/.ece-install.conf, the script will also tell you this if
you forget to provide such a configuration file:
#+BEGIN_SRC sh
[ece-install] /root/.ece-install.conf doesn't exist, I cannot live without it :-(
#+END_SRC

As for the technet credentials, the script will also tell you if it
cannot find what it's looking for:
#+BEGIN_SRC sh
[ece-install] Be sure to set technet_user and technet_password
[ece-install] in /root/.ece-install.conf
#+END_SRC

The minimum .ece-install.conf file is thus:
#+BEGIN_SRC sh
technet_user=<user>
technet_password=<password>
#+END_SRC

If you're installing WF as well, you'll need additional credentials
for this, see the Widget Framwork section below, and if you want to
runn a fully automatic install without any user interaction, you'll
need to specify some FAI specific parameters, see the FAI section
below. 

With the configuration file in place, you're now ready to run it:
#+BEGIN_SRC sh
# bash ece-install [-v|--verbose]
#+END_SRC

ece-install will try to "fail fast", exiting as soon as it detects an
error during its execution:
#+BEGIN_SRC sh
[ece-install-1] The command [cd /does/not/exist] FAILED, exiting :-(
[ece-install-1] See /var/log/ece-install.log for further details.
#+END_SRC

As a last resort, if something goes astray with the script, and the
log file cannot give you enough clues, the ultimate way of debugging
this is to run the BASH interpreter with the -x flag:
#+BEGIN_SRC sh
# bash -x ece-install
#+END_SRC

Here you can see everything that BASH does when running the script,
how the wildcard variables expand and so on. Normally, having a tail
on /var/log/ece-install.log should be sufficient, though.

* Available Server Profiles
When starting the script, it will ask you which server profile you
want to install:
#+BEGIN_SRC sh
Hi, which server profile do you wish to install?

Select 1-9 and press ENTER

  1 - All in one, the full stack on one host. 
      Suitable for development and test environments.
      It will install caching server, ECE, assembly host, database &
      Widget Framework as well as set up a new publication.
  2 - Editorial (publication) server.
      This will install ECE and an assembly host.
  3 - Presentation server (ECE, memcached).
  4 - Database server.
  5 - Cache server (cache & web server).
  6 - RMI hub.
  7 - Standalone search instance (solr + indexer-webapp).
  8 - Install the Widget Framework.
      (You need user/pass for repo.escenic.com for this).
  9 - Create a new publication.
      This profile will create new publication based on WF
      (if available) or ECE/clean-demo.
#+END_SRC
** Common for All Server Profiles
The script will install a Munin node on the host. It will also
install the Escenic specific Munin plugins on hosts where there are
any Escenic server components.

TBD: there is currently an issue with the Escenic plugins not working
properly with the new ece/ece-install scripts. We're working on this.

** Common for Editorial, Presentation and Search Instances
*** Sun Java 6
*** Apache Tomcat application server
- Compression of textual content (previously, this was typically set
  up with Apache and its mod\_deflate module).
- pooling set up tweaked for high read/write performance.
- proper logging configuration directing solr messages to its own log.
- routing information in the cookies
- application server access log
*** Basic Escenic Nursery configuration
The basic Nursery configuration is taken care of for you, including RMI,
  database, search and application server/URIs. 
*** APR, native library for optimal Tomcat I/O performance
*** Escenic Assembly environment
The reason why ece-install sets this up on each host, is to make the
installation process as smooth as possible. The assembly environment
may be removed after the installation if you want to.

*** Database driver

*** Compression of content 
This was was previously accomplished by having a web server in fron t
of the application server (or cache server if you used ESI). A typical
system architecture would contain Apache with mod\_deflate. However,
this is no longer necessary as Varnish can handles ESI parsing of
compressed content (and many other things that we before needed Apache
for). Thus, we'll let the application server do the compression for us
now.

** 1 - Full Stack on One Host
This profile is suitable for developers and admins wanting to set up a
test environment. It will install the full stack including caching
server, application server, ECE, assembly host, database, Widget
Framework, as well as creating a publication for you.

For further details on each of the different server components, see
the different profile descriptions bellow.


** 2 - Editorial Server (Publication Server)


** 3 - Presentation Server
This will set up a typical presentation server:
- Memcached, distributed memory cache
- Escenic Assembly environment (which may be removed after the
  installation). 
- Deployment setup to only deploy escenic-admin and the
  publication(s).

** 4 - Database Server
If ece-install is run on a support version of Debian or Ubuntu, this
will install the excellent Percona distribution of MySQL with their
set of high performance patches.

If not, MySQL or Percona must be installed in advance.

Given that the mysqld is install, this profile will download all the
Escenic components and install the ECE database schema based from the
SQL files contained inside the distribution bundles. To accomplish
this, the script will make a call to drop-and-create-ecedb in the same
directory as the ece-intall script itself.

The script will fail by itself if the DB already exists:
#+BEGIN_SRC sh
[ece-install] Setting up the ECE database schema ...
ERROR 1007 (HY000) at line 1: Can't create database 'ece5db'; database exists
ERROR 1050 (42S01) at line 2: Table 'DBChangeLog' already exists
[ece-install] running tables FAILED, exiting :-(
#+END_SRC

** 5 - Cache Server
If ece-install is run on a support version of Debian or Ubuntu, it
will install the latest Varnish 3.0 caching server from the Varnish
APT repository.

If ece-install is run on a different platform, the admin must install
Varnish 3.x prior to running ece-install.

The script will configure Varnish for a typical Escenic site:
- it will set up the cache server on port 80
- will set up an access control lists of IPs which may access the
  privileged web applications such as /escenic-admin, /escenic and
  /webservice.

  ece-install will also add the host from which you connect, making
  sure that if you've SSH-ed into the server to conduct the install,
  you'll automatically be included in the "staff" ACL and can access
  all the web applications without editing these ACLs (or disabling
  security as many does).

- will set up sticky sessions/session binding
- will set up a backend cluster and allow the user to enter the
  different backend servers that will serve the web site.
- will set up configuration to strip away cookies from static
  resources, such as CSS, JS and pictures.
- will install the nginx web server for serving static content and
  will configure Varnish accordingly. This will be very useful for
  Adactus servers wanting to pull content from your ECEs.
- will install a Munin gatherer and make its interface available 
  when accesssing the web server directly (port 81) 

TBD:
- If run on a Linux platform, the script will tweak the kernel
  parameters for optimal TCP handling for a web facing server.
- let the /munin run through on port 80, requiring the connecting IPs
  to be in the staff network ACL, defined in the Varnish
  configuration. 

** 8 - Install Widget Framework
You'll need a user name and password for accessing the
repo.escenic.com Maven repository. You should get these credentials
when you bought Widget Framework. If you for some reason do not have
these, please contact support@escenic.com. 

If you don't have these ready in your .ece-install.conf, ece-install will
complain:
#+BEGIN_SRC sh
[ece-install] Be sure to set wf_user and wf_password in /root/.ece-install.conf
[ece-install] If you don't have these, please contact support@escenic.com
#+END_SRC
** 9 - Create Publication
This profile will create a publication for you, only asking you the
name of the publication and which ECE instance to use for its
creation.

This installation profile will base the publication on the Widget
Framework if its present on the system, if not, ECE's clean demo WAR
is used as a basis.  
* Full Automatic Install (FAI)
The ece-install script has support for doing a full automatic install
(FAI).

The ece-install script understands for the following settings in the
$HOME/.ece-install.conf file of the root user:

|---------------------------------+------------------+-----------------------------------------------|
| Parameter                       |          Default | Description                                   |
|---------------------------------+------------------+-----------------------------------------------|
| fai\_all\_install               |                0 | Install all components on your server.        |
| fai\_cache\_install             |                0 | Install cache server profile                  |
| fai\_cache\_backends            | ${HOSTNAME}:8080 | Space separated, e.g. "app1:8080 app2:8080"   |
| fai\_db\_install                |                0 | Install db profile                            |
| fai\_db\_host                   |        $HOSTNAME | Useful for editor & presentation profiles     |
| fai\_db\_port                   |             3306 | Useful for editor & presentation profiles     |
| fai\_editor\_install            |                0 | Install the editorial profile                 |
| fai\_editor\_name               |          editor1 | Name of the editor instance                   |
| fai\_editor\_port               |             8080 | HTTP port of the editor instance              |
| fai\_editor\_shutdown           |             8005 | Shutdown port of the editor instance          |
| fai\_enabled                    |                0 | Whether or not to run ece-install in FAI mode |
| fai\_public\_host\_name         | ${HOSTNAME}:8080 | The public address for your website           |
| fai\_presentation\_install      |                0 | Install the presentation server profile       |
| fai\_presentation\_name         |             web1 | Name of the presentation server instance      |
| fai\_presentation\_port         |             8080 | HTTP port of the presentation server instance |
| fai\_presentation\_shutdown     |             8005 | Shutdown port of the presentation instance    |
| fai\_publication\_create        |                0 | Create a new publication                      |
| fai\_publication\_name          |            mypub | Name of the publication                       |
| fai\_publication\_use\_instance |             dev1 | Name of local instance to use for creation    |
| fai\_rmi\_install               |                0 | Install RMI hub profile                       |
| fai\_search\_name               |          search1 | Name of the search instance                   |
| fai\_search\_port               |             8080 | HTTP port of the search instance              |
| fai\_search\_shutdown           |             8005 | Shutdown port of the search instance          |
| fai\_wf\_install                |                0 | Install Widget Framework profile              |
|---------------------------------+------------------+-----------------------------------------------|

As you've probably have guessed, 0 means "false" and 1 means "true" :-)

To automatically install an editorial server and create a publication
called "jollygood", the minimal configuration in .ece-install.conf
would be:

#+BEGIN_SRC sh
fai_enabled=1
fai_editor_install=1
fai_publication_create=1
fai_publication_name=jollygood
#+END_SRC

When FAI is enabled, ece-install will report:
#+BEGIN_SRC sh
[ece-install] Full Automatic Install (FAI) enabled.
[ece-install] All user input will be read from /root/.ece-install.conf
#+END_SRC

* Running More Than One Installation Process
If the script believes there's already an ece-intall process running,
it will abort:
#+BEGIN_SRC sh
[ece-install] There's already one ece-install process running. If you believe
[ece-install] this is wrong, e.g. if a previous run of ece-install was aborted
[ece-install] before it completed, you may delete /var/run/ece-install.pid and
[ece-install] run ece-install again.
#+END_SRC

* Re-running ece-install (and How To Speed It Up)
Although the initial thought behind ece-install, is to run it on a
clean system to get up and running as soon as possible. However, you
may want to re-run ece-install on the same host, for instance to add
another instance of ECE, set up Widget Framework or create another
publication.

ece-install has a number of features which will try to minimise the
time it takes to run it on consecutive runs. If running on Debian
based systems, it will check if you already have installed
pre-requisite 3rd party libraries and only if any are missing will it
ask the package manager to fetch it.

Likewise, ece-install will see if the Escenic artifacts or application
server that you need are already present in the /tmp/ece-downloads
folder, and only download the missing ones (if any).

To get a list of the artifacts it'll pull from
http://technet.escenic.com and http://tomcat.apache.org search for the
following variables:
- technet\_download\_list
- wf\_download\_list
- tomcat\_download

* Overview of File Paths Used by the ece-install script
There are of course other paths involved when setting up your system,
but these should be the most interesting ones.

|---------------------------------------------+------------------------------------------------------------------|
| Path                                        | Explanation                                                      |
|---------------------------------------------+------------------------------------------------------------------|
| /etc/apt/sources.list.d/escenic.list        | 3rd party APT repositories added by ece-install *)               |
| /etc/default/ece                            | The configuration file for the ece init.d script                 |
| /etc/escenic/ece-<instance>.conf            | Instance specific settings for /usr/bin/ece                      |
| /etc/escenic/ece.conf                       | Common ece.conf file for /usr/bin/ece                            |
| /etc/escenic/engine/common                  | Common Nursery configuration layer                               |
| /etc/escenic/engine/common/security         | Common security configuration for all ECE instances.             |
| /etc/escenic/engine/common/trace.properties | Log4j configuration, produces instance specific log files.       |
| /etc/escenic/engine/instance/<instance>     | Instance specific Nursery configuration                          |
| /etc/escenic/solr                           | ECE specific Solr configuration                                  |
| /etc/init.d/mysql[d]                        | For starting and stopping MySQL/Percona                          |
| /etc/init.d/varnish                         | For starting and stopping Varnish                                |
| /etc/intit.d/ece                            | The init.d script managing _all_ the ECE instances on your host. |
| /etc/varnish/default.vcl                    | The Varnish configuration                                        |
| /opt/escenic                                | All ECE components can be found here                             |
| /opt/escenic/assemblytool                   | The assembly tool                                                |
| /opt/escenic/assemblytool/plugins           | Contains symlinks to all plugins in /opt/escenic                 |
| /opt/escenic/engine                         | Symlink pointing to the current ECE                              |
| /opt/tomcat                                 | Symlink pointing to the install Apache Tomcat (catalina\_home)   |
| /opt/tomcat-<instance>                      | Instance specific Tomcat files (catalina\_base)                  |
| /usr/bin/ece                                | Script for operating all ECE instances + RMI hub and EAE         |
| /usr/sbin/drop-and-create-ecedb             | DB script used by the ece-install script                         |
| /usr/sbin/ece-install                       | The installation script described in this guide                  |
| /var/log/escenic/<type>-<instance>.log      | The instance's log4j  log                                        |
| /var/log/escenic/<type>-<instance>.out      | The instance system out log                                      |
| /var/log/escenic/solr.<date>.log            | The Solr log (not in standard out!)                              |
| /var/run/escenic/<type>-<instance>.pid      | The instance's  PID file                                         |
|---------------------------------------------+------------------------------------------------------------------|

*) Applies only to Debian based systems.

* Assumptions
** /etc/esecenic is shared
It's assumed that the /etc/escenic directory is either on a shared
file system or rsync-ed among the hosts that are running the ECE
instances (the exception being database and cache servers).
 
* Uninstalling Everything That the ece-install Set Up
WARNING: this is potentially dangerous as some of these components may
be used by other pieces of software you have running on your
host. However, this may be useful if you're installing a clean
environment and want to e.g. undo your previous install to install a
different profile.

Open the ece-install script and look for the "un\_install\_ece"
function, it has copy and pastable commands for undoing most/all
things set up by the script.


* Example Output FAI
The ece-install will often be run in FAI mode where all the settings
are read from ~/.ece-install.conf. Given the following entries in this
file: 
#+BEGIN_SRC sh
technet_user=apples
technet_password=andoranges
wf_user=foo
wf_password=bar

fai_enabled=1
fai_all_install=1
#+END_SRC

The following output is produced from ece-install:
#+INCLUDE: "/tmp/ece-install.out" src text

