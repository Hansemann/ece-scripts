#! /usr/bin/env bash

# The goal of this script is install a complete production environment
# for web sites using on Escenic Content Engine as their CMS. The
# script is equally well suited for installing development, testing
# and staging environments, in addition to recover from backups create
# with the "ece -i <instance> backup" command.
#
# Always check for the latest version at
# http://github.com/escenic/ece-scripts

# echo comments and suggestions > tkj@vizrt.com
# echo frustrations > /dev/null

#####################################################################
# User definable variables (the defaults are fine in most
# cases). These are the most likely variables you want to change and
# they can all be set in the ece-install.conf file
#####################################################################
ece_user=escenic
ece_group=escenic
jdbc_driver=/usr/share/java/mysql-connector-java.jar
debug=0

# These variables govern where software is installed and data and run
# time files are written.
dir_suffix=escenic
escenic_root_dir=/opt/${dir_suffix}
escenic_conf_dir=/etc/${dir_suffix}
escenic_log_dir=/var/log/${dir_suffix}
escenic_data_dir=/var/lib/${dir_suffix}
escenic_run_dir=/var/run/${dir_suffix}
escenic_backups_dir=/var/backups/${dir_suffix}
escenic_spool_dir=/var/spool/${dir_suffix}
escenic_cache_dir=/var/cache/${dir_suffix}
escenic_crash_dir=/var/crash/${dir_suffix}
appserver_parent_dir=/opt

# country code for selecting the correct (APT) mirror.
mirror_country_suffix=jp

# The script will install the sun-java6-jdk package on Debian based
# systems and this is the path of the JAVA home with this package. If
# you're using a different system or have other preferences, change
# java_home.
java_home=/usr/lib/jvm/java-6-sun
#####################################################################

pid_file=/var/run/$(basename $0).pid
download_dir=/tmp/ece-downloads
log=/var/log/$(basename $0).log
conf_file=$HOME/ece-install.conf
ece_scripts_git_source=https://github.com/skybert/ece-scripts.git
maven_opts="--batch-mode"
wget_opts="--continue --inet4-only --quiet"
apt_opts="--no-install-recommends"
curl_opts="--silent"

# hook scripts
ece_install_scripts_dir=$HOME/ece-install.d

# globals will be set to correct values in run-time.
appserver_host=localhost
appserver_port=8080
on_debian_or_derivative=0
on_redhat_or_derivative=0
on_debian=0
on_ubuntu=0
force_packages=0

# because the all in one profile will run database, search and app
# server profiles, all of which needs downloading and setting up the
# ECE software components.
ece_software_setup_completed=0

# the next steps printed when the user has installed his/her
# components.
next_steps=()


technet_download_list="
http://technet.escenic.com/downloads/assemblytool-2.0.2.zip
http://technet.escenic.com/downloads/release/53/analysis-engine-2.3.7.0.zip
http://technet.escenic.com/downloads/release/53/community-engine-3.6.1.0.zip
http://technet.escenic.com/downloads/release/53/dashboard-1.1.0.2.zip
http://technet.escenic.com/downloads/release/53/engine-5.3.5.121857.zip
http://technet.escenic.com/downloads/release/53/forum-3.0.0.0.zip
http://technet.escenic.com/downloads/release/53/geocode-dist-2.3.1.0.zip
http://technet.escenic.com/downloads/release/53/inpage-2.0.0.0.zip
http://technet.escenic.com/downloads/release/53/lucy-dist-4.1.6.0.zip
http://technet.escenic.com/downloads/release/53/menu-editor-dist-2.0.6.0.zip
http://technet.escenic.com/downloads/release/53/mobile-expansion-3.0.0.0.zip
http://technet.escenic.com/downloads/release/53/poll-2.1.3.0.zip
http://technet.escenic.com/downloads/release/53/revision-history-dist-1.0.0.1.zip
http://technet.escenic.com/downloads/release/53/section-feed-dist-2.0.4.0.zip
http://technet.escenic.com/downloads/release/53/xml-editor-dist-2.1.0.0.zip
"
wf_download_list="
http://technet.escenic.com/downloads/widget-framework/widget-framework-core-1.10.0.0.zip
"

## Bootstrapping, load files from /usr/share/escenic/ece-scripts The
## method will first try to be smart, in case the user has copied the
## ece-scripts somewhere else., e.g.: moved everything to ~/ece-scrpts
## or /opt/escenic/ece-scripts, this should also work.
function init() {
  # first, try to be nice
  local dir=$(dirname $0)/../share/escenic/ece-scripts

  # then check the standard location
  if [ ! -d $dir  ]; then
    dir=/usr/share/escenic/ece-scripts
  fi

  if [ -d $dir ]; then
    # load common librariees
    common_libraries="common-bashing.sh common-pulse.sh common-io.sh common-os.sh"
    for el in $common_libraries; do
      source $dir/${el}
    done

    # load ece-install modules
    for el in $dir/ece-install.d/*.sh; do
      log "Loading $(basename $0) module:" $el
      source $el
    done
  else
    echo "I cannot find $(basename $0)'s dependencies, exiting :-("
    exit 1
  fi
}

function set_up_engine_directories()
{
    for el in $engine_dir_list; do
        make_dir $el
    done
}

function download_escenic_components()
{
    if [ $ece_software_setup_completed -eq 1 ]; then
        return
    fi

    print "Downloading software from technet.escenic.com ..."
    
    run cd $download_dir
    for el in $technet_download_list; do
      if [ -e $(basename $el) ]; then
        continue
      fi

      log "Downloading $el ..."
      run wget $wget_opts \
        --http-user $technet_user \
        --http-password $technet_password \
        $el 
    done
}

# we need to do one apt-get update to be sure the package list is
# fresh. However, we don't want to do this in a common method, since
# it *might* be that all pre-requisite packages already are present. 
one_time_apt_update_done=0

# Will install the passed packages if these are not installed from
# before.
#
# parameters:
# $1 : space separated string of package names 
function install_packages_if_missing() {
  log "Installing package(s) [$@] if missing ..."
  
  if [ $on_debian_or_derivative -eq 1 ]; then
    some_are_missing=0
    for el in $@; do
            # we don't need to grep away "No packages found matching
            # ..." since this message from dpkg is written to standard
            # error.
      if [ $(dpkg -l $el 2>/dev/null | grep ^ii | wc -l) -lt 1 ]; then
        some_are_missing=1
      fi
    done
    
    if [ $some_are_missing -eq 0 ]; then
      return
    elif [ $one_time_apt_update_done -eq 0 ]; then
      log "First running APT update to ensure fresh package list, " \
        "then continuing the above"
      run apt-get update
      one_time_apt_update_done=1
    fi

    if [ $force_packages -eq 1 ]; then
      run apt-get install $apt_opts --assume-yes --force-yes $@
    else
      run apt-get install $apt_opts --assume-yes $@
    fi
  elif [ $on_redhat_or_derivative -eq 1 ]; then
    # since some versions of yum use --assume-yes and some use
    # --assumeyes (!), we use the short form, -y, here
    run yum install -y $@
  fi
}

function install_common_os_packages()
{
  print_and_log "Installing common OS packages ..."
  git_package=git
  if [ $on_debian_or_derivative -eq 1 ]; then
        # Ubuntu doesn't have git (!) but only git-core.
    if [ $on_ubuntu -eq 1 ]; then
      git_package=git-core
    fi
  fi
  
  local packages="curl $git_package wget unzip"
  install_packages_if_missing $packages
  
  for el in lsb_release curl wget git unzip; do
    assert_pre_requisite $el
  done
}

######################################################################
# <pulse-methods>
######################################################################
function download_escenic_components_p() {
  $(download_escenic_components) &
  show_pulse $! "Downloading Escenic components from Technet"
}

function set_up_instance_specific_nursery_configuration_p() {
  $(set_up_instance_specific_nursery_configuration) &
  show_pulse $! "Setting up instance specific Nursery configuration"
}

function assemble_deploy_and_restart_type_p() {
  echo $(assemble_deploy_and_restart_type) &
  show_pulse $! "Assembling, deploying & starting $instance_name"
}

function set_up_engine_and_plugins_p() {
  $(set_up_engine_and_plugins) &
  show_pulse $! "Setting up the Escenic Content Engine & its plugins"
}
  
function check_for_required_downloads_p() {
  $(check_for_required_downloads) &
  show_pulse $! "Asserting that required downloads succeeded"
}

function set_up_user_environment_p() {
  $(set_up_user_environment) &
  show_pulse $! "Setting up the ${ece_user} user's UNIX environment"
}

function set_up_ece_scripts_p() {
  $(set_up_ece_scripts) &
  show_pulse $! 'Setting up the ece UNIX scripts'
  if [ -n "${messages}" ]; then
    echo $message
  fi
}

function install_common_os_packages_p() {
  $(install_common_os_packages) &
  show_pulse $! "Installing 3rd party packages needed by $(basename $0)"
}

function install_ece_third_party_packages_p() {
  $(install_ece_third_party_packages) &
  show_pulse $! "Installing 3rd party packages needed by ECE"
}

function set_up_assembly_tool_p() {
  $(set_up_assembly_tool) &
  show_pulse $! "Setting up the Assembly Tool"
}
  
######################################################################
# </pulse-methods>
######################################################################

function set_up_ece_scripts()
{
  print_and_log 'Setting up the ece UNIX scripts ...'

  run cd $download_dir
  if [ -d ece-scripts ]; then
    (
      run cd ece-scripts
      run git pull
    )
  else
    run git clone $ece_scripts_git_source
  fi
  
  run cp -r ece-scripts/usr/* /usr/
  run cp -r ece-scripts/etc/bash_completion.d/ece /etc/bash_completion.d/
  run cp -r ece-scripts/etc/init.d/* /etc/init.d/

  for el in ece-scripts/etc/default/*; do
    local file=/etc/default/$(basename $el)
    if [ -e $file ]; then
      print_and_log "$file already exists, not overwriting it"
      continue
    fi
    run cp $el /etc/default/
  done
  
  for el in ece-scripts/etc/escenic/*; do
    local file=/etc/escenic/$(basename $el)
    if [ -e $file ]; then
      print_and_log "$file already exists, not overwriting it"
      continue
    fi
    run cp $el /etc/escenic/
  done
  
  local file=${escenic_conf_dir}/ece.conf
  set_conf_file_value assemblytool_home ${escenic_root_dir}/assemblytool $file
  set_conf_file_value backup_dir ${escenic_backups_dir} $file
  set_conf_file_value cache_dir ${escenic_cache_dir} ${file}
  set_conf_file_value ece_home ${escenic_root_dir}/engine ${file}
  set_conf_file_value escenic_conf_dir ${escenic_conf_dir} ${file}
  set_conf_file_value heap_dump_dir ${escenic_crash_dir} ${file}
  set_conf_file_value java_home ${java_home} ${file}
  set_conf_file_value log_dir ${escenic_log_dir} ${file}
  set_conf_file_value pid_dir ${escenic_run_dir} ${file}
  set_conf_file_value rmi_hub_conf ${escenic_conf_dir}/rmi-hub ${file}
  set_conf_file_value solr_home ${escenic_data_dir}/solr ${file}
  set_conf_file_value ece_security_configuration_dir \
    ${escenic_conf_dir}/engine/common/security \
    ${file}

  run sed -i "s#/etc/escenic#${escenic_conf_dir}#g" /etc/bash_completion.d/ece
  run sed -i "s#/opt/escenic#${escenic_root_dir}#g" /etc/bash_completion.d/ece
}

# don't quote values when setting conf file values with
# set_conf_file_value. This is a hack-ish variable due to EAE's
# handling of .cfg files.
dont_quote_conf_values=0

# The function accepts the following parameters:
# $1 is the property
# $2 is the value
#
# The function will set these for the current instance's ece.conf. If
# the value already is set, it will replace it with this one.
function set_ece_instance_conf()
{
    instance_conf_file=$escenic_conf_dir/ece-$instance_name.conf
    set_conf_file_value $1 $2 $instance_conf_file
}

# $1 the domain
#
# The method will ensure that the passed domain is resolvable by the
# host on which ece-install is run.
function ensure_domain_is_known_to_local_host() {
  if [ -z "$1" ]; then
    return 1
  fi
  
  local hostname_ip=$(ping -c 1 $HOSTNAME 2>/dev/null | \
    head -1 | \
    cut -d'(' -f2 | \
    cut -d')' -f1)
  local domain_ip=$(ping -c 1 $1 2>/dev/null | \
    head -1 | \
    cut -d'(' -f2 | \
    cut -d')' -f1)

  local keep_off_etc_hosts=${fai_keep_off_etc_hosts-0}
  if [[ $domain_ip != "127.0.0.1" && \
    $domain_ip != "127.0.1.1" && \
    $domain_ip != $hostname_ip && \
    $keep_off_etc_hosts -ne 1 ]]; then
    print_and_log "The domain name ${1} is not resolvable to this host"
    print_and_log "I will remedy this by adding it to /etc/hosts"
    cat >> /etc/hosts <<EOF

# added by $(basename $0) @ $(date)
127.0.1.1 ${1}
EOF
  fi
  if [[ $domain_ip != $localhost_ip && \
    $domain_ip != hostname_ip && \
    $keep_off_etc_hosts -eq 1 ]]; then
    print_and_log "The domain name ${1} is not resolvable to this host"
    print_and_log "but I will keep off /etc/hosts as you've requested."
  fi
}

# last, give the control back to the ECE user & group 
function set_correct_permissions()
{
    log "Setting correct permissions on ECE related directories ..."

    for el in $engine_dir_list; do
        if [ ! -d $el ]; then
            continue
        fi
        
        if [ ${el} = ${escenic_data_dir} ]; then
            local correct_permission=$(find ${el} \
                -maxdepth 0 \
                -user ${ece_user} | \
                wc -l)
            if [ $correct_permission -gt 0 ]; then
                log "Data directory root, $el,"
                log "has correct permissions, skiping sub directories."
                continue
            fi
        fi

        run chown -R ${ece_user}:${ece_group} $el
    done
    
    if [ -d "$tomcat_base" ]; then
        run chown -R ${ece_user}:${ece_group} $tomcat_base
    fi
}

function print_status_and_next_steps()
{
    local now=`date +%s`
    local started=`stat -c %Y $pid_file`
    local seconds=$(( now - started ))
    local days=$(( seconds / ( 60 * 60 * 24 ) ))
    local seconds_left=$(( seconds - ( $days * 60 * 60 * 24 ) ))
    local hours=$(( seconds_left / ( 60 * 60 ) ))
    local seconds_left=$(( seconds_left - ( $hours * 60 * 60 ) ))
    local minutes=$(( seconds_left / 60 ))
    local seconds_left=$(( seconds_left - $minutes * 60 ))

    if [ $install_profile_number -ne $PROFILE_RESTORE_FROM_BACKUP ]; then
        s="The installation is now $(green complete)!"
    else
        s="The restore is now complete!"
    fi
    print_and_log $s" It took" ${days}d ${hours}h ${minutes}m ${seconds_left}s

    if [ $install_profile_number -ne $PROFILE_RESTORE_FROM_BACKUP -a \
        $install_profile_number -ne $PROFILE_CACHE_SERVER -a \
        $install_profile_number -ne $PROFILE_WIDGET_FRAMEWORK ]; then
        add_next_step "Install info: "\ "/usr/share/doc/escenic/ece-install-guide.txt"
        add_next_step "Guide books: http://documentation.vizrt.com/ece-5.3.html"
    fi
    
    for (( i = 0; i < ${#next_steps[@]}; i++ )); do
        print "  - " ${next_steps[$i]}
    done

    print $'\n'"Enjoy your time with Escenic Content Engine!"$'\n'
    print "-$(red Vizrt) Online"
}

function check_for_required_downloads()
{
  if [ $ece_software_setup_completed -eq 1 ]; then
    return
  fi
  
  print_and_log "Asserting that required downloads succeeded ..."
  local required_escenic_packages="engine assemblytool"
  local some_is_missing=0
  
  for el in $required_escenic_packages; do
    if [ $(ls $download_dir/$el*.zip 2>/dev/null | wc -l) -lt 1 ]; then
      print_and_log "-> $el is missing"
      some_is_missing=1
    else
      # want the newest one if there are several
      local file=$(ls $download_dir/$el*.zip | tail -1)
      unzip -t $file > /dev/null 2>&1

      if [ $? -ne 0 ]; then
        log "$file has been downloaded, but is faulty,"
        log "remove it and re-run $0"
        return 9
      fi
    fi
  done

  if [ $some_is_missing -eq 1 ]; then
    print_and_log "Add these download archives to the technet_download_list"
    print_and_log "and re-run $(basename $0)"
    exit 1
  fi
}

function set_up_user_environment()
{
  local bashrc=$(get_user_home_directory $ece_user)/.bashrc
  
  if [ $(grep bash_completion.d/ece ${bashrc} 2>/dev/null | \
    wc -l) -lt 1 ]; then
    echo ". /etc/bash_completion.d/ece" >> ${bashrc}
  fi
  
  if [ $(grep ECE_CONF_LOCATIONS ${bashrc} | wc -l) -eq 0 ]; then
    echo "export ECE_CONF_LOCATIONS=\"$escenic_conf_dir\"" >> ${bashrc}
    run chown ${ece_user}:${ece_group} ${bashrc}
  fi
}

# So far, I've used this method for copy/past-ing it into the shell
# before running ece-insatll anew. It might be useful for its own
# command later, though.
function un_install_ece()
{
    print_and_log "Uninstalling ECE ..."
     # TODO safety, warnings++
    rm -rf $escenic_conf_dir/ \
        ${appserver_parent_dir}/*tomcat* \
        $escenic_root_dir \
        $escenic_data_dir \
        $escenic_run_dir/ \
        $escenic_conf_dir/ \
        /usr/bin/ece \
        $escenic_log_dir/ \
        /etc/apt/sources.list.d/escenic.list \
        /var/run/ece-install.pid
#        $HOME/.m2 \

    # remove the Varnish key
    apt-key remove C4DEFFEB
    # remove the Percona key
    apt-key remove CD2EFD2A

    for el in \
        ant \
        ant-contrib \
        ant-optional \
        libmysql-java \
        maven2 \
        memcached \
        munin* \
        nginx \
        percona* \
        varnish \
        sun-java6-jdk \
        ; do
        apt-get --yes --purge remove $el
    done
    
    apt-get clean
}

## Returns the privileged hosts. This will include both the IP(s) the
## logged in user conduction the ece-install is coming from, as well
## as any IPs defined in fai_privileged_hosts.
function get_privileged_hosts() {
  local privileged_hosts=${fai_privileged_hosts}
  
  for ip in $(
    w -h  | \
      grep pts | \
      grep -v ":0.0" | \
    sed "s#.*pts/[0-9]*[ ]*\(.*\)#\1#" | \
      cut -d' ' -f1 | \
      sort | \
      uniq
  ); do
    privileged_hosts=${privileged_hosts}" "${ip}
  done

  echo ${privileged_hosts}
}

function read_user_input()
{
    installation_profiles=(
        "$PROFILE_ALL_IN_ONE - All in one, full stack on one host,"\
" suitable for dev & test environments"
"$PROFILE_EDITORIAL_SERVER - Editorial (publication) server"
"$PROFILE_PRESENTATION_SERVER - Presentation server (ECE + memcached)."
"$PROFILE_DB_SERVER - Database server"
"$PROFILE_CACHE_SERVER - Cache server (cache and web server)"
"$PROFILE_RMI_HUB - RMI hub"
"$PROFILE_SEARCH_SERVER - Search server (Solr + indexer-webapp)"
"$PROFILE_WIDGET_FRAMEWORK - Install Widget Framework."
"$PROFILE_CREATE_PUBLICATION - Create a new publication"\
" based on WF if available, ECE/clean-demo if not"
"$PROFILE_MONITORING_SERVER - A monitoring server (web server +"\
" Munin gatherer)"
"$PROFILE_RESTORE_FROM_BACKUP - Restore from backup"\
" (DB, data files, binaries, conf & publications)"
    )
    
    echo "Hi, which server profile do you wish to install?"$'\n'

    for (( i = 0; i < ${#installation_profiles[@]}; i++ )); do
        echo "  " ${installation_profiles[$i]}
    done

    echo $'\n'"Select 1-${#installation_profiles[@]} and press ENTER"
    echo -n "Your choice [1]> "
    read install_profile_number
    
    if [ -z "$install_profile_number" ]; then
        install_profile_number=$PROFILE_ALL_IN_ONE
    fi

    if [ $(is_number $install_profile_number) -eq 0 ]; then
        print_and_log "Profile number, $install_profile_number, is not a number"
        remove_pid_and_exit_in_error
    fi
}

function assert_correct_runtime_environment()
{
    if [ $(whoami) != "root" ]; then
        echo "You must be root when running $(basename $0)"
        exit 1
    fi
    
    if [ -e $pid_file ]; then
        echo "There's already one $(basename $0) process running."
        echo "If you blelieve this is wrong, e.g. if a previous run of" 
        echo "$(basename $0) was aborted before it completed, you"
        echo "may remove ${pid_file} and run $(basename $0) again."
        exit 1
    else
        echo $BASHPID > $pid_file
        started=`stat -c %Y $pid_file`
    fi

    if [ ! -e "$conf_file" ]; then
        echo $conf_file "doesn't exist."
        echo "I cannot live without it, so I'm exiting :-("
        
        if [ -e $pid_file ]; then
          rm $pid_file
        fi
        
        exit 1
    fi
}

function common_pre_install()
{
    print "I'm logging to $log"

    run source $conf_file

    # These variables are placed here as all the directories can be
    # overridden in ece-install.conf
    common_nursery_dir=$escenic_conf_dir/engine/common
    
    # Because of issue VF-3559, we also
    # create the default family and host directories.
    engine_dir_list="
      $common_nursery_dir
      $escenic_conf_dir/engine/family/default
      $escenic_conf_dir/engine/host/localhost
      $escenic_root_dir
      $escenic_cache_dir
      $escenic_crash_dir
      $escenic_data_dir
      $escenic_data_dir/solr/data
      $escenic_log_dir
      $escenic_run_dir
      $escenic_spool_dir/migration
    "
    ece_install_env=${escenic_run_dir}/$(basename $0).env

    if [ -z "$technet_user" -o -z "$technet_password" ]; then
        print_and_log "Be sure to set technet_user and technet_password "
        print_and_log "in $conf_file"
        remove_pid_and_exit_in_error
    fi

    if [ -e /etc/debian_version -a -x /usr/bin/dpkg ]; then
        on_debian_or_derivative=1
        export DEBIAN_FRONTEND=noninteractive
        
      # chicken and the egg problem, we need lsb_release to install the
      # packages later on, hence as soon as we know we've got a Debian
      # based platform, we install lsb-release. Also note, the
      # executable, lsb_release, is in the list of required binaries in
      # install_common_os_packages.
      install_packages_if_missing "lsb-release"
    fi

    if [ -e /etc/redhat-release ]; then
      on_redhat_or_derivative=1
      install_packages_if_missing "redhat-lsb"
    fi

    assert_pre_requisite lsb_release
    
    if [ $(lsb_release -i | grep Ubuntu | wc -l) -gt 0 ]; then
        on_ubuntu=1
    elif [ $(lsb_release -i | grep Debian | wc -l) -gt 0 ]; then
        on_debian=1
    fi

    # git will fail if curl doesn't have the right CA certificates
    # installed. As this happens on RedHat/CentOS 5.7, we turn it off
    # here.
    export GIT_SSL_NO_VERIFY=true
    
    make_dir $download_dir
    install_common_os_packages
    create_user_and_group_if_not_present $ece_user $ece_group
    set_up_user_environment
}

function add_apt_source() {
  local escenic_sources=/etc/apt/sources.list.d/escenic.list
  if [[ ! -e $escenic_sources &&
        $(grep "$@" /etc/apt/sources.list | wc -l) -lt 1 ]]; then
    echo "$@" >> $escenic_sources
    run apt-get update
  elif [ $(grep "$@" $escenic_sources | wc -l) -lt 1 ]; then
    echo "$@" >> $escenic_sources
    run apt-get update
  fi
}

# Parameters:
# $1 : your added line
function add_next_step()
{
    next_steps[${#next_steps[@]}]="$@"
    return
    
    if [ -n "$next_steps" ]; then
        next_steps=${next_steps}$'\n'"[$(basename $0)] "${1}
    else
        next_steps="[$(basename $0)] $@"
    fi
}

# $1 is the default instance name, the calee is responsible for
# setting this.
function ask_for_instance_name()
{
    if [ $fai_enabled -eq 0 ]; then
        print "What do you want to call this ECE instance?"
        print "Press ENTER to accept the default instance name, $1."
        echo -n "Your choice [$1]> "
        read instance_name
    else
        if [ $install_profile_number -eq $PROFILE_EDITORIAL_SERVER ]; then
            instance_name=${fai_editor_name-$1}
        elif [ $install_profile_number -eq $PROFILE_PRESENTATION_SERVER ]; then
            instance_name=${fai_presentation_name-$1}
        elif [ $install_profile_number -eq $PROFILE_SEARCH_SERVER ]; then
            instance_name=${fai_search_name-$1}
        elif [ $install_profile_number -eq $PROFILE_ANALYSIS_SERVER ]; then
            instance_name=${fai_analysis_name-$1}
        fi
    fi

    if [ -z "$instance_name" ]; then
        instance_name=$1
    fi
    make_dir $escenic_conf_dir/engine/instance/${instance_name}
}

# Will update /etc/default/instance with the type instances which are
# installed on the given host. This method should work for engine,
# search and analysis instances.
function update_type_instances_to_start_up()
{
  run source /etc/default/ece

  if [ $type = "engine" ]; then
    if [[ "$engine_instance_list" != *"${instance_name}"* ]]; then
      print_and_log "Adding $instance_name instance to the init.d configuration"
      set_conf_file_value engine_instance_list \
        "$engine_instance_list $instance_name" \
        /etc/default/ece
    fi
  elif [ $type = "search" ]; then
    if [[ "$search_instance_list" != *"${instance_name}"* ]]; then
      print_and_log "Adding $instance_name instance to the init.d configuration"
      set_conf_file_value search_instance_list \
        "$search_instance_list $instance_name" \
        /etc/default/ece
    fi
  elif [ $type = "analysis" ]; then
    if [[ "$analysis_instance_list" != *"${instance_name}"* ]]; then
      print_and_log "Adding $instance_name instance to the init.d configuration"
      set_conf_file_value analysis_instance_list \
        "$analysis_instance_list $instance_name" \
        /etc/default/ece
    fi
  fi
}

ece_instance_ear_file=""
ece_instance_conf_archive=""

function set_archive_files_depending_on_profile()
{
    if [ $install_profile_number -eq $PROFILE_PRESENTATION_SERVER ]; then
        ece_instance_ear_file=$fai_presentation_ear
        ece_instance_conf_archive=$fai_presentation_conf_archive
    elif [ $install_profile_number -eq $PROFILE_EDITORIAL_SERVER ]; then
        ece_instance_ear_file=$fai_editor_ear
        ece_instance_conf_archive=$fai_editor_conf_archive
    elif [ $install_profile_number -eq $PROFILE_SEARCH_SERVER ]; then
        ece_instance_ear_file=$fai_search_ear
        ece_instance_conf_archive=$fai_search_conf_archive
    fi
}

# Returns 1 if we're installing the ECE instances from a provided EAR
# file
function is_installing_from_ear()
{
    log install_profile_number=$install_profile_number
    log ece_instance_ear_file=$ece_instance_ear_file

    if [[ -z "$ece_instance_ear_file" || \
        $fai_enabled -eq 0 ]]; then
        echo 0
        return
    fi

    echo 1
}

# Returns 1 if we're using a tarball with the Nursery & JAAS configuration.
function is_using_conf_archive(){
    log install_profile_number=$install_profile_number
    log ece_instance_conf_archive=$ece_instance_conf_archive

    if [[ -z "$ece_instance_conf_archive" || \
        $fai_enabled -eq 0 ]]; then
        echo 0
        return
    fi

    echo 1
}

# verifies that the passed file(s) exist and are readable, depends on
# set_archive_files_depending_on_profile
function verify_that_files_exist_and_are_readable()
{
    debug "Verifying that the file(s) exist(s) and are readable: $@"
    
    for el in $@; do
        if [ ! -e $el ]; then
            print_and_log "The file" $el "doesn't exist. I will exit now."
            remove_pid_and_exit_in_error
        elif [ ! -r $el ]; then
            print_and_log "The file" $el "isn't readable. I will exit now."
            remove_pid_and_exit_in_error
        fi
    done
}   

function install_presentation_server()
{
    print_and_log "Installing a presentation server on $HOSTNAME."
    type=engine
    install_ece_instance "web1" $PROFILE_PRESENTATION_SERVER
}

function assemble_deploy_and_restart_type()
{
    print_and_log "Assembling, deploying & starting $instance_name ..."
    
    set_correct_permissions

    # need to run clean here since we might be running multiple
    # profiles in the same ece-install process.
    ece_command="ece -i $instance_name -t $type clean assemble deploy restart"
    if [ $(is_installing_from_ear) -eq 1 ]; then
        run cp $ece_instance_ear_file $escenic_cache_dir/engine.ear
        ece_command="ece -i $instance_name -t $type deploy restart"
        log "Using the supplied EAR instead of running an assembly."
    fi
    
    su - $ece_user -c "$ece_command" 1>>$log 2>>$log
    exit_on_error "su - $ece_user -c \"$ece_command\""
}

# If the system is installed using the recommended paths, the method
# will return a list of the instances configured in
# ${escenic_conf_dir}/engine/instance
function get_instance_list()
{
    local instance_list=""

    if [ -r ${escenic_conf_dir}/engine/instance ]; then
        instance_list=$(ls ${escenic_conf_dir}/engine/instance)
    fi

    echo $instance_list
}

function install_editorial_server()
{
    print_and_log "Installing an editorial server on $HOSTNAME ..."
    type=engine
    install_ece_instance "editor1" 0
}

function run_hook()
{
    if [ -e $ece_install_scripts_dir -a \
        -e ${ece_install_scripts_dir}/${1} ]; then

        # Dumping all set variables (no functions) to a file from
        # which the hooks can pick them up. We do this to avoid
        # running "export" in front of all local variables which may
        # or may not be useful. Furthermore, we filter out upper case
        # variables as these are environment variables.
        set | grep ^[a-z] | grep \= > ${ece_install_env}
        
        print_and_log "Started hook  $1 ..."
        bash ${ece_install_scripts_dir}/${1}
        print_and_log "Finished hook $1 ..."
    fi
}

# reads the value of the desired setting from $conf_file
#
# parameters: $1 : the conf key, see ece-install-guide.txt for an
# overview of the available keys.
function get_conf_value()
{
    if [ ! -e "$conf_file" ]; then
        print_and_log $conf_file "doesn't exist."
        remove_pid_and_exit_in_error
    fi

    if [ $(grep $1 $conf_file | grep -v ^# | wc -l) -gt 0 ]; then
        echo $(grep $1 $conf_file | grep -v ^# | cut -d'=' -f2)
    fi
}

# returns 0 for false, 1 for true
#
# parameters: $1 : the conf key, see get_conf_value
function get_boolean_conf_value()
{
    value=$(get_conf_value $1)
    if [ -z "$value" ]; then
        echo 0
    elif [ "$value" = "" ]; then
        echo 0
    elif [ "$value" -eq 1 ]; then
        echo 1
    else
        echo 0
    fi
}


# useful for development and test environments.
function install_all_in_one_environment()
{
    print_and_log "Installing an all-in-one environment on $HOSTNAME ..."
    type=engine
    install_database_server
    install_ece_instance "dev1" 0
    install_cache_server
    install_web_server 2
    install_munin_gatherer
    set_up_solr

    install_widget_framework
    create_publication
}

function add_server_to_runlevels()
{
  # no need to add init.d scripts to the runlevel(s) for these
  # profiles
  if [ $install_profile_number -eq $PROFILE_WIDGET_FRAMEWORK -o \
    $install_profile_number -eq $PROFILE_DB_SERVER -o \
    $install_profile_number -eq $PROFILE_CACHE_SERVER ]; then
    return
  fi

  if [ $on_debian_or_derivative -eq 1 ]; then
    print_and_log "Adding the ece init.d script to the default run levels ..."
    run update-rc.d ece defaults
  elif [ $on_redhat_or_derivative -eq 1 ]; then
    run chkconfig --level 35 ece on      
  else
    add_next_step "Remember to add /etc/init.d/ece to the desired run levels." 
    # TODO add init.d to the default runlevels, for other
    # distributions too:
    # - Gentoo: rc-update add ece default
  fi
}

function common_post_install() {
  if [ $install_profile_number -eq $PROFILE_ALL_IN_ONE -o \
    $install_profile_number -eq $PROFILE_PRESENTATION_SERVER -o \
    $install_profile_number -eq $PROFILE_RMI_HUB -o \
    $install_profile_number -eq $PROFILE_EDITORIAL_SERVER ]; then
    add_server_to_runlevels
  fi

  if [ $install_profile_number -ne $PROFILE_WIDGET_FRAMEWORK -a \
    $install_profile_number -ne $PROFILE_CREATE_PUBLICATION -a \
    $install_profile_number -ne $PROFILE_RESTORE_FROM_BACKUP ]; then

    if [[ "${fai_monitoring_node_munin_skip}" != "1" ]]; then
      install_munin_node
    fi

    if [[ $install_profile_number != $PROFILE_MONITORING_SERVER &&
          "${fai_monitoring_node_nagios_skip}" != "1" ]]; then
      install_nagios_node
    fi
  fi

  set_correct_permissions
  
  print_status_and_next_steps
  run rm $pid_file
}

for el in $@; do
    if [ $el = "-v" -o $el = "--verbose" ]; then
        debug=1
    elif [ $el = "-f" -o $el = "--conf-file" ]; then
        next_is_conf_file=1
    elif [[ -n $next_is_conf_file && $next_is_conf_file -eq 1 ]]; then
        conf_file=$el
        case ${conf_file} in
            /*)
                ;;
            *)
                conf_file=$(pwd)/${conf_file}
                ;;
        esac
        
        next_is_conf_file=0
    fi
done

assert_correct_runtime_environment
init
fai_enabled=$(get_boolean_conf_value fai_enabled)

if [ $fai_enabled -eq 1 ]; then
    print_and_log "Full Automatic Install (FAI) enabled."
    print_and_log "All user input will be read from $conf_file"
    
    common_pre_install

    no_fai_profile=1
    
    if [ $(get_boolean_conf_value fai_all_install) -eq 1 ]; then
        install_profile_number=$PROFILE_ALL_IN_ONE
        install_all_in_one_environment
        no_fai_profile=0
    fi
    
    if [[ $(get_boolean_conf_value fai_db_install) -eq 1 ||
          $(get_boolean_conf_value fai_analysis_db_install) -eq 1 ]]; then
        install_profile_number=$PROFILE_DB_SERVER
        install_database_server
        no_fai_profile=0
    fi
    
    if [ $(get_boolean_conf_value fai_editor_install) -eq 1 ]; then
        install_profile_number=$PROFILE_EDITORIAL_SERVER
        install_editorial_server
        no_fai_profile=0
    fi
    
    if [ $(get_boolean_conf_value fai_search_install) -eq 1 ]; then
        install_profile_number=$PROFILE_SEARCH_SERVER
        install_search_server
        no_fai_profile=0
    fi
    
    if [ $(get_boolean_conf_value fai_cache_install) -eq 1 ]; then
        install_profile_number=$PROFILE_CACHE_SERVER
        install_cache_server
        install_web_server 0
        no_fai_profile=0
    fi
    
    if [ $(get_boolean_conf_value fai_wf_install) -eq 1 ]; then
        install_profile_number=$PROFILE_WIDGET_FRAMEWORK
        install_widget_framework
        no_fai_profile=0
    fi
    
    if [ $(get_boolean_conf_value fai_presentation_install) -eq 1 ]; then
        install_profile_number=$PROFILE_PRESENTATION_SERVER
        install_presentation_server
        no_fai_profile=0
    fi
    
    if [ $(get_boolean_conf_value fai_publication_create) -eq 1 ]; then
        install_profile_number=$PROFILE_CREATE_PUBLICATION
        create_publication
        no_fai_profile=0
    fi
    
    if [ $(get_boolean_conf_value fai_monitoring_install) -eq 1 ]; then
        install_profile_number=$PROFILE_MONITORING_SERVER
        install_monitoring_server
        no_fai_profile=0
    fi
    
    if [ $(get_boolean_conf_value fai_restore_from_backup) -eq 1 ]; then
        install_profile_number=$PROFILE_RESTORE_FROM_BACKUP
        restore_from_backup
        no_fai_profile=0
    fi
    
    if [ $(get_boolean_conf_value fai_rmi_install) -eq 1 ]; then
        install_profile_number=$PROFILE_RMI_HUB
        install_rmi_hub
        no_fai_profile=0
    fi

    if [ $(get_boolean_conf_value fai_analysis_install) -eq 1 ]; then
        install_profile_number=$PROFILE_ANALYSIS_SERVER
        install_analysis_server
        no_fai_profile=0
    fi
    
    if [ $(get_boolean_conf_value fai_nfs_server_install) -eq 1 ]; then
      install_profile_number=$PROFILE_NFS_SERVER
      install_nfs_server
      no_fai_profile=0
    fi
    
    if [ $(get_boolean_conf_value fai_nfs_client_install) -eq 1 ]; then
      install_profile_number=$PROFILE_NFS_CLIENT
      install_nfs_client
      no_fai_profile=0
    fi

    # checking for VIP profile last so that ece-install can (if so
    # configured in the ece-install.con) install all dependent
    # services first.
    if [ $(get_boolean_conf_value fai_vip_install) -eq 1 ]; then
      install_profile_number=$PROFILE_VIP_PROVIDER
      install_vip_provider
      no_fai_profile=0
    fi
    
    if [ $no_fai_profile -eq 1 ]; then
        print_and_log "No install profile selected, be sure to have one of the "
        print_and_log "fai_<profile>_install=1 in your $conf_file"
        remove_pid_and_exit_in_error
    fi
    
    common_post_install
else
    read_user_input
    common_pre_install
    
    case $install_profile_number in
        $PROFILE_ALL_IN_ONE)
            install_all_in_one_environment
            ;;
        $PROFILE_CACHE_SERVER)
            install_cache_server
            install_web_server 0
            ;;
        $PROFILE_DB_SERVER)
            install_database_server
            ;;
        $PROFILE_EDITORIAL_SERVER)
            install_editorial_server
            ;;
        $PROFILE_PRESENTATION_SERVER)
            install_presentation_server
            ;;
        $PROFILE_SEARCH_SERVER)
            install_search_server
            ;;
        $PROFILE_RMI_HUB)
            install_rmi_hub
            ;;
        $PROFILE_WIDGET_FRAMEWORK)
            install_widget_framework
            ;;
        $PROFILE_CREATE_PUBLICATION)
            create_publication
            ;;
        $PROFILE_MONITORING_SERVER)
            install_munin_gatherer
            install_web_server 1
            ;;
        $PROFILE_RESTORE_FROM_BACKUP)
            restore_from_backup
            ;;
        $PROFILE_VIP_PROVIDER)
            install_vip_provider
            ;;
        *)
            print "Invalid profile number $install_profile_number, must be 1-11"
            remove_pid_and_exit_in_error
            ;;
    esac
    common_post_install
fi

exit 0

