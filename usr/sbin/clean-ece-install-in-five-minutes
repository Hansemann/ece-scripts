#! /usr/bin/env bash

# The goal of this script, is to have an ECE up and running within
# five minutes. The setup the user is getting is suitable for a
# production environment, except for the fact that with this script,
# all ECE components are set up on the same host.

# by tkj@vizrt.com

#####################################################################
# User definable variables (the defaults are fine in most cases).
#####################################################################
ece_user=escenic
ece_group=escenic
download_dir=/tmp/ece-downloads/
log=/tmp/$(basename $0).log
jdbc_driver=/usr/share/java/mysql.jar
appserver_port=8080
#####################################################################

id="[ece-install]"
pid_file=/tmp/$(basename $0).pid

function print()
{
    echo $id $@
}

if [ $(whoami) != "root" ]; then
    print "You must be root when running $(basename $0)"
    exit 1
fi

technet_user=`grep technet_user $HOME/.escenicrc 2>/dev/null | cut -d'=' -f2`
technet_password=`grep technet_password $HOME/.escenicrc 2>/dev/null | cut -d'=' -f2`

if [ -z $technet_user -o -z $technet_password ]; then
    print "Be sure to set technet_user and technet_password "
    print "in $HOME/.escenicrc"
    exit 1
fi


technet_download_list="
http://technet.escenic.com/downloads/assemblytool-2.0.2.zip
http://technet.escenic.com/downloads/release/53/analysis-engine-2.3.6.0.zip
http://technet.escenic.com/downloads/release/53/community-engine-3.6.1.0.zip
http://technet.escenic.com/downloads/release/53/dashboard-1.0.0.0.zip
http://technet.escenic.com/downloads/release/53/engine-5.3.1.3.zip
http://technet.escenic.com/downloads/release/53/forum-3.0.0.0.zip
http://technet.escenic.com/downloads/release/53/inpage-1.3.0.0.zip
http://technet.escenic.com/downloads/release/53/lucy-dist-4.1.6.0.zip
http://technet.escenic.com/downloads/release/53/menu-editor-dist-2.0.6.0.zip
http://technet.escenic.com/downloads/release/53/poll-2.1.3.0.zip
http://technet.escenic.com/downloads/release/53/xml-editor-dist-2.1.0.0.zip
"

tomcat_download=http://ftp.nsysu.edu.tw/Apache/tomcat/tomcat-6/v6.0.32/bin/apache-tomcat-6.0.32.tar.gz

dir_list="
/etc/escenic/engine/common
/opt/escenic
/var/cache/escenic
/var/crash/escenic
/var/lib/escenic
/var/log/escenic
/var/run/escenic
"
function make_dir()
{
    if [ ! -d $1 ]; then
        mkdir -p $1
    fi
}

for el in $dir_list; do
    make_dir $el
done

# TODO download documentation to
# /usr/share/doc/escenic/content-engine-<version>/

function download_all()
{
    make_dir $download_dir
    cd $download_dir
    for el in $technet_download_list; do
        wget --continue \
            --http-user $technet_user \
            --http-password $technet_password \
            $el \
            1>>$log 2>>$log
    done

    wget --continue $tomcat_download \
        1>>$log 2>>$log
}

function install_debian_packages()
{
    apt-get install curl \
        1>>$log 2>>$log

    
    echo "deb http://repo.percona.com/apt squeeze main" \
        >> /etc/apt/sources.list.d/escenic.list
    curl http://repo.varnish-cache.org/debian/GPG-key.txt | apt-key add -
    echo "deb http://repo.varnish-cache.org/debian/ $(lsb_release -s -c) varnish-3.0" >> \
        /etc/apt/sources.list.d/escenic.list

    gpg --keyserver  hkp://keys.gnupg.net --recv-keys 1C4CBDCDCD2EFD2A \
        1>>$log 2>>$log

    gpg -a --export CD2EFD2A | apt-key add - \
        1>>$log 2>>$log
    
    # apt-get update
    apt-get install \
        ant \
        ant-contrib \
        ant-optional \
        libapr1 \
        libtcnative-1 \
        libmysql-java \
        memcached \
        maven2 \
        percona-server-client \
        percona-server-server \
        sun-java6-jdk \
        varnish \
        wget \
        1>>$log 2>>$log

    # TODO later: support for the tomcat package 
    #        tomcat6 \
}

make_dir $ece_directories

function set_up_engine_plugins_and_assembly_tool()
{
    make_dir /opt/escenic/
    cd /opt/escenic/
    unzip $download_dir/engine*.zip \
        1>>$log 2>>$log

    ln -s engine-* engine
    mv $download_dir/engine*.zip /tmp
    
    make_dir /opt/escenic/assemblytool/
    cd /opt/escenic/assemblytool/
    unzip $download_dir/assemblytool*zip \
        1>>$log 2>>$log

    mv $download_dir/assemblytool*zip /tmp/

    # now, there's only plugins left in the download dir
    # we extract them in /opt/escenic as we want to re-use
    # them between minor updates of ECE.
    cd /opt/escenic/
    for el in $download_dir/*.zip; do
        unzip $el \
        1>>$log 2>>$log
    done
    
    cd /opt/escenic/assemblytool/
    make_dir plugins
    cd plugins
    find ../../ -maxdepth 1 -type d | \
        grep -v assemblytool | \
        while read directory; do
         if [ $directory = "../../" ]; then
             continue
         fi
        
          # nuisance to get the community engine, but not the engine
          if [ $(echo $directory | grep engine | wc -l) -gt 0 ]; then
              if [ $(echo $directory | grep community | wc -l) -lt 1 ]; then
                  continue
              fi
          fi
          
          ln -s $directory
        done

    cd /opt/escenic/assemblytool/
    ant -q initialize \
        1>>$log 2>>$log
    cat assemble.properties | \
        sed 's/#\ engine.root\ =\ \./engine.root=\/opt\/escenic\/engine/g' \
        > assemble.properties.tmp
    mv assemble.properties.tmp assemble.properties

    cat assemble.properties | \
        sed 's/\#\# plugins\ =\ \/path\/to\/plugins/plugins=\/opt\/escenic\/assemblytool\/plugins/g' \
        > assemble.properties.tmp
    mv assemble.properties.tmp assemble.properties
}


function set_up_ece_scripts()
{
    cd $download_dir
    if [ -d ece-scripts ]; then
        (cd ece-scripts
            git pull 1>>$log 2>>$log)
    else
        git clone git://github.com/skybert/ece-scripts.git \
        1>>$log 2>>$log
    fi
    
    cp -r ece-scripts/usr/* /usr/
    cp -r ece-scripts/etc/* /etc/

    file=/etc/escenic/ece.conf
    cat $file | \
        sed 's/tomcat_home=\/usr\/share\/tomcat6/tomcat_home=\/opt\/tomcat/g' \
        > ${file}.tmp
    mv ${file}.tmp ${file}


    # add init.d to the default runlevels, support at least
    # RedHat/chekcconfig and Debian/update-rc.d
}

function set_up_ecedb()
{
    make_dir /opt/escenic/engine/plugins
    cd /opt/escenic/engine/plugins
    
    find ../../ -maxdepth 1 -type d | \
        grep -v assemblytool | \
        while read directory; do
         if [ $directory = "../../" ]; then
             continue
         fi
        
          # nuisance to get the community engine, but not the engine
          if [ $(echo $directory | grep engine | wc -l) -gt 0 ]; then
              if [ $(echo $directory | grep community | wc -l) -lt 1 ]; then
                  continue
              fi
          fi
          
          ln -s $directory
        done
    
    bash /usr/sbin/drop-and-create-ecedb \
        1>>$log 2>>$log
    cd ~/
    rm -rf /opt/escenic/engine/plugins
}

function set_up_basic_nursery_configuration()
{
    cp -r /opt/escenic/engine/siteconfig/config-skeleton/* \
        /etc/escenic/engine/common/
    cp -r /opt/escenic/engine/security/ \
        /etc/escenic/engine/common/

    make_dir /etc/escenic/engine/instance

    for el in /opt/escenic/assemblytool/plugins/*; do
        if [ ! -d $el/misc/siteconfig/ ]; then
            continue
        fi

        cp -r $el/misc/siteconfig/* /etc/escenic/engine/common/
        
    done

    cat > /etc/escenic/engine/common/ServerConfig.properties <<EOF
databaseProductName=MySQL
filePublicationRoot=/var/lib/escenic/engine/
webPublicationRoot=http://$HOSTNAME:${appserver_port}/
EOF
    cat > /etc/escenic/engine/common/neo/io/managers/ContentManager.properties <<EOF
readConnector=/connector/ReadConnector
updateConnector=/connector/UpdateConnector
EOF

    file=/etc/escenic/engine/common/com/escenic/community/CommunityEngine.properties
    cat $file | \
        sed 's/jdbc\/ecome/jdbc\/ECE_UPDATE_DS/g' \
        > $file.tmp
    mv $file.tmp $file
}

function make_ln()
{
    if [ -e $1 ]; then
        ln -s $1
    else
        print "Tried to make a symlink to $el, but it doesn't exist"
        exit 1
    fi
}

function set_up_proper_logging_configuration()
{
    cat > /etc/escenic/engine/common/trace.properties <<EOF
log4j.rootLogger=ERROR, ECELOG
log4j.appender.ECELOG=org.apache.log4j.DailyRollingFileAppender
log4j.appender.ECELOG.File=/var/log/escenic/\${escenic.server}-messages
log4j.appender.ECELOG.layout=org.apache.log4j.PatternLayout
log4j.appender.ECELOG.layout.ConversionPattern=%d %5p [%t] %x (%c) %m%n
EOF
    cd /opt/tomcat/lib/
    make_ln /etc/escenic/engine/common/trace.properties

    cat > /opt/tomcat/conf/logging.properties <<EOF
handlers = 1catalina.org.apache.juli.FileHandler, 2localhost.org.apache.juli.FileHandler, java.util.logging.ConsoleHandler, 6localhost.org.apache.juli.FileHandler

.handlers = 1catalina.org.apache.juli.FileHandler, java.util.logging.ConsoleHandler

1catalina.org.apache.juli.FileHandler.level = FINE
1catalina.org.apache.juli.FileHandler.directory = \$\{catalina.base\}/logs
1catalina.org.apache.juli.FileHandler.prefix = catalina.

2localhost.org.apache.juli.FileHandler.level = FINE
2localhost.org.apache.juli.FileHandler.directory = \$\{catalina.base\}/logs
2localhost.org.apache.juli.FileHandler.prefix = localhost.

java.util.logging.ConsoleHandler.level = FINE
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter

6localhost.org.apache.juli.FileHandler.level = FINE
6localhost.org.apache.juli.FileHandler.directory = /var/log/escenic
6localhost.org.apache.juli.FileHandler.prefix = solr.

org.apache.solr.level=INFO
org.apache.solr.handlers=6localhost.org.apache.juli.FileHandler

org.apache.catalina.core.ContainerBase.[Catalina].[localhost].level = INFO
org.apache.catalina.core.ContainerBase.[Catalina].[localhost].handlers = 2localhost.org.apache.juli.FileHandler

EOF
}

function set_up_app_server
{
    cd /opt/
    tar xzf $download_dir/apache-*.tar.gz
    ln -s apache-tomcat* tomcat
    make_dir tomcat/escenic/lib
    
    make_dir /opt/tomcat/lib
    cd /opt/tomcat/lib
    make_ln $jdbc_driver

    cat /opt/tomcat/conf/catalina.properties | \
        sed 's/common.loader=/common.loader=\$\{catalina.base\}\/escenic\/lib\/\*\.jar\,/g' \
        > /opt/tomcat/conf/catalina.properties.tmp
    mv /opt/tomcat/conf/catalina.properties.tmp /opt/tomcat/conf/catalina.properties
    
    cat > /opt/tomcat/conf/server.xml <<EOF
<?xml version='1.0' encoding='utf-8'?>
<Server port="8105" shutdown="SHUTDOWN">
  <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />
  <Listener className="org.apache.catalina.core.JasperListener" />
  <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />
  <Listener className="org.apache.catalina.mbeans.ServerLifecycleListener" />
  <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />

  <GlobalNamingResources>
    <Resource name="UserDatabase"
              auth="Container"
              type="org.apache.catalina.UserDatabase"
              description="User database that can be updated and saved"
              factory="org.apache.catalina.users.MemoryUserDatabaseFactory"
              pathname="conf/tomcat-users.xml" />
    <Resource
        name="jdbc/ECE_READ_DS"
        auth="Container"
        type="javax.sql.DataSource"
        maxActive="400"
        maxIdle="8"
        maxWait="2000"
        initialSize="20"
        username="ece5user"
        password="ece5password"
        driverClassName="com.mysql.jdbc.Driver"

url="jdbc:mysql://localhost:3306/ece5db?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;characterSetResults=UTF-8"
        removeAbandoned="true"
        removeAbandonedTimeout="120"
        logAbandoned="true"
        testOnBorrow="false"
        testOnReturn="false"
        timeBetweenEvictionRunsMillis="60000"
        numTestsPerEvictionRun="5"
        minEvictableIdleTimeMillis="30000"
        testWhileIdle="true"
        validationQuery="select now()"
        />
    <Resource
        name="jdbc/ECE_UPDATE_DS"
        auth="Container"
        type="javax.sql.DataSource"
        maxActive="100"
        maxIdle="8"
        maxWait="2000"
        initialSize="20"
        username="ece5user"
        password="ece5password"
        driverClassName="com.mysql.jdbc.Driver"
        url="jdbc:mysql://localhost:3306/ece5db?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;characterSetResults=UTF-8"
        removeAbandoned="true"
        removeAbandonedTimeout="120"
        logAbandoned="true"
        testOnBorrow="false"
        testOnReturn="false"
        timeBetweenEvictionRunsMillis="60000"
        numTestsPerEvictionRun="5"
        minEvictableIdleTimeMillis="30000"
        testWhileIdle="true"
        validationQuery="select now()"
        />
  </GlobalNamingResources>

  <Service name="Catalina">
    <Connector port="${appserver_port}"
               protocol="HTTP/1.1" 
               connectionTimeout="20000" 
               URIEncoding="UTF-8"
               redirectPort="8543" />
    <Engine name="Catalina" defaultHost="localhost" jvmRoute="jvm1">
      <Valve className="org.apache.catalina.valves.AccessLogValve"
             prefix="access."
             suffix=".log"
             pattern="common"/>
      <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
             resourceName="UserDatabase"/>
      <Host name="localhost"
            appBase="webapps"
            unpackWARs="true"
            autoDeploy="true"
            xmlValidation="false"
            xmlNamespaceAware="false">
      </Host>
    </Engine>
  </Service>
</Server>

EOF
    cat > /opt/tomcat/conf/context.xml <<EOF
<?xml version='1.0' encoding='utf-8'?>
<Context>

  <WatchedResource>WEB-INF/web.xml</WatchedResource>

  <ResourceLink
      global="jdbc/ECE_READ_DS"
      name="jdbc/ECE_READ_DS"
      type="javax.sql.DataSource"/>
  
  <ResourceLink
      global="jdbc/ECE_UPDATE_DS"
      name="jdbc/ECE_UPDATE_DS"
      type="javax.sql.DataSource"/>
  
  <Environment
      name="escenic/indexer-webservice"
      value="http://localhost:${appserver_port}/indexer-webservice/index/"
      type="java.lang.String"
      override="false"/>

  <Environment
      name="escenic/index-update-uri"
      value="http://localhost:${appserver_port}/solr/update/"
      type="java.lang.String"
      override="false"/>

  <Environment
      name="escenic/solr-base-uri"
      value="http://localhost:${appserver_port}/solr/"
      type="java.lang.String"
      override="false"/>

  <Environment
      name="escenic/head-tail-storage-file"
      value="/var/lib/escenic/engine/head-tail.index"
      type="java.lang.String"
      override="false"/>

  <Environment
      name="escenic/failing-documents-storage-file"
      value="/var/lib/escenic/engine/failures.index"
      type="java.lang.String"
      override="false"/>

</Context>
EOF

}

# last, give the control back to the ECE user & group 
function set_correct_permissions()
{
    if [ $(grep $ece_user /etc/passwd | wc -l) -lt 1 ]; then
        # TODO add support for useradd
        adduser $ece_user
    fi
    if [ $(grep $ece_group /etc/group | wc -l) -lt 1 ]; then
        addgroup $ece_group
    fi

    for el in $dir_list; do
        chown -R ${ece_user}:${ece_group} $el
    done
    
    chown -R ${ece_user}:${ece_group} /opt/tomcat/
}

function print_status()
{
    # su - $ece_user -c "ece versions" 1>>$log 2>>$log

    now=`date +%s`
    started=`stat -c %Y $pid_file`
    seconds=$(( now - started ))
    days=$(( seconds / ( 60 * 60 * 24 ) ))
    seconds_left=$(( seconds - ( $days * 60 * 60 * 24 ) ))
    hours=$(( seconds_left / ( 60 * 60 ) ))
    seconds_left=$(( seconds_left - ( $hours * 60 * 60 ) ))
    minutes=$(( seconds_left / 60 ))
    seconds_left=$(( seconds_left - $minutes * 60 ))

    print "The basic Escenic Content Engine setup is now completed."
    print "It took" ${days}d ${hours}h ${minutes}m ${seconds_left}s
    print ""
    print "The Varnish cache server is running on http://${HOSTNAME}:80/"
    print "where as ECE is running on http://${HOSTNAME}:$appserver_port/"
    print "You can type 'ece versions' to see all the installed components"
}

function print_next_steps()
{
    cat <<EOF
  You must now do the following:

* go to http://$HOSTNAME:8080/escenic-admin/pages/publication/new.jsp
  and create a new publication using the WAR found in:
  /opt/escenic/assemblytool/dist/war/mypub.war

* configure the instances you want to be started at
  boot time in /etc/default/ece

EOF
}

function set_up_test_publication()
{
    make_dir /opt/escenic/assemblytool/publications/
    cd /opt/escenic/assemblytool/publications/
    cp /opt/escenic/engine/contrib/wars/demo-clean.war mypub.war
    cat > /opt/escenic/assemblytool/publications/mypub.properties <<EOF
name: mypub
source-war: mypub.war
context-root: mypub
EOF

    su - $ece_user -c "ece assemble deploy start" 1>>$log 2>>$log

    # TODO create the publication by POSTing to
    # /escenic-admin/do/publication/resource
}


function check_for_pre_requisites()
{
    pre_requisites="
curl
wget
ant
mvn
java
mysql
"
    ok=1
    
    for el in $pre_requisites; do
        if [ $(which $el | wc -l) -lt 1 ]; then
            print "You're missing $el"
            ok=0
        fi
    done

    if [ $ok -eq 0 ]; then
        print "Please install the missing packages before"
        print "running $(basename $0) again."
        exit 1
    fi
}

function check_for_required_downloads()
{
    required_escenic_packages="engine assemblytool apache-tomcat"
    
    for el in $required_escenic_packages; do
        if [ ! -e $download_dir/${el}* ]; then
            print "Couldn't find $el* in $download_dir"
            exit 1
        fi
    done
}

function set_up_memcached()
{
    # 1) download java library
    # 2) configure PresenationArticle cache for the publication
    # 3) build and re-deploy
    echo ""
}

function start_components()
{
    # TODO might be a hub and indexer too
    su - $ece_user -c "ece start" 1>>$log 2>>$log
}

function set_up_user_enviornment()
{
    # TODO get this from ece.conf and other magic
    if [ $(grep JAVA_HOME /home/$ece_user/.bashrc | wc -l) -lt 1 ]; then
        echo JAVA_HOME=/usr/lib/jvm/java-6-sun >> /home/$ece_user/.bashrc
    fi
}

function set_up_solr()
{
    cp -r  /opt/escenic/engine/solr/conf /etc/escenic/solr
    mkdir -p /var/lib/escenic/solr/
    cd /var/lib/escenic/solr/
    ln -s /etc/escenic/solr conf
}

function un_install_ece()
{
    # TODO safety, warnings++
    rm -rf /etc/escenic/ \
        /opt/*tomcat* \
        /opt/escenic \
        /var/lib/escenic \
        /var/run/escenic/ \
        /etc/escenic/ \
        /usr/bin/ece \
        /var/log/escenic/;

    # prepare for new install
    mv /tmp/*.zip /tmp/ece-downloads/

}

function stop_conflicting_processes()
{
    # TODO this is dirty
    killall java 1>>$log 2>>$log
}

function set_up_varnish()
{
    /etc/init.d/varnish stop 1>>$log 2>>$log

    file=/etc/default/varnish
    cat $file | \
        sed 's/6081/80/g' \
        > $file.tmp
    mv $file.tmp $file

    cat > /etc/varnish/default.vcl <<EOF
/* IPs that are allowed to access the administrative pages/webapps. */
acl staff {
  "localhost";
}

/* The IP of the Adactus/Mobilize server */
acl adactus {
  "203.33.232.216";
}

backend app1 {
  .host = "$HOSTNAME";
  .port = "$appserver_port";
}

/* The client director gives us session stickiness based on client
 * IP. */
director webdirector client {
  {
    .backend = app1;
    .weight = 1;
  }
}

sub vcl_recv {
  if (!client.ip ~ staff &&
      (req.url ~ "^/escenic" ||
       req.url ~ "^/studio" ||
       req.url ~ "^/webservice" ||
       req.url ~ "^/escenic-admin")) {

    error 405 "Not allowed.";
  }

  /* Only Adactus/Mobilize is allowed to access the /binary context
   * which contains all the full quality video files. */
  if (!client.ip ~ adactus && req.url ~ "^/binary") {
    error 405 "Not allowed.";
  }

  set req.backend = webdirector;

  if (req.url ~ "\.(png|gif|jpg|css|js)$" || req.url == "/favicon.ico") { 
    remove req.http.Cookie;
  }
}

/* Called when content is fetched from the backend. */
sub vcl_fetch {
  /* Remove cookies from these resource types and cache them for a
   * long time */
  if (req.url ~ "\.(png|gif|jpg|css|js)$" || req.url == "/favicon.ico") { 
    set beresp.ttl = 5h;
    remove beresp.http.Set-Cookie;
  }
}

sub vcl_deliver {
  /* Adds debug header to the result so that we can easily see if a
   * URL has been fetched from cache or not.
   */
  if (obj.hits > 0) {
    set resp.http.X-Cache = "HIT #" + obj.hits;
  }
  else {
    set resp.http.X-Cache = "MISS";
  }

  set resp.http.X-Cache-Backend = req.backend;
}
EOF
    /etc/init.d/varnish start 1>>$log 2>>$log
}

touch $pid_file
print "Here we go!"
print "I'm logging to $log"

if [ -e /etc/debian_version -a -x /usr/bin/dpkg ]; then
    install_debian_packages
fi

stop_conflicting_processes
check_for_pre_requisites
download_all
check_for_required_downloads
set_up_engine_plugins_and_assembly_tool
set_up_basic_nursery_configuration
set_up_solr
set_up_ece_scripts
set_up_ecedb
set_up_app_server
set_up_proper_logging_configuration
set_correct_permissions
set_up_user_enviornment

# commented out until set_up_user_enviornment uses the running engine
# to create a new publication
# start_components
set_up_test_publication

set_up_varnish

print_status
print_next_steps

