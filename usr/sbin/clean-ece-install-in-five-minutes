#! /usr/bin/env bash

# The goal of this script, is to have an ECE up and running within
# five minutes. The setup the user is getting is suitable for a
# production environment, except for the fact that with this script,
# all ECE components are set up on the same host.

# by tkj@vizrt.com

#####################################################################
# User definable variables (the defaults are fine in most cases).
#####################################################################
ece_user=escenic
ece_group=escenic
download_dir=/tmp/ece-downloads
log=/tmp/$(basename $0).log
jdbc_driver=/usr/share/java/mysql.jar
appserver_port=8080
#####################################################################

id="[ece-install]"
pid_file=/tmp/$(basename $0).pid
on_debian_or_derivative=0
on_debian=0

debug=1

# because the all in one profile will run database, search and app
# server profiles, all of which needs downloading and setting up the
# ECE software components.
ece_software_setup_completed=0

function debug()
{
    if [ $debug -eq 1 ]; then
        echo "$@" >> $log
    fi
}

function print()
{
    echo $id $@
}

if [ $(whoami) != "root" ]; then
    print "You must be root when running $(basename $0)"
    exit 1
fi

technet_user=`grep technet_user $HOME/.escenicrc 2>/dev/null | cut -d'=' -f2`
technet_password=`grep technet_password $HOME/.escenicrc 2>/dev/null | cut -d'=' -f2`

if [ -z "$technet_user" -o -z "$technet_password" ]; then
    print "Be sure to set technet_user and technet_password "
    print "in $HOME/.escenicrc"
    exit 1
fi


technet_download_list="
http://technet.escenic.com/downloads/assemblytool-2.0.2.zip
http://technet.escenic.com/downloads/release/53/analysis-engine-2.3.6.0.zip
http://technet.escenic.com/downloads/release/53/community-engine-3.6.1.0.zip
http://technet.escenic.com/downloads/release/53/dashboard-1.0.0.0.zip
http://technet.escenic.com/downloads/release/53/engine-5.3.2.2.zip
http://technet.escenic.com/downloads/release/53/forum-3.0.0.0.zip
http://technet.escenic.com/downloads/release/53/inpage-1.3.0.0.zip
http://technet.escenic.com/downloads/release/53/lucy-dist-4.1.6.0.zip
http://technet.escenic.com/downloads/release/53/menu-editor-dist-2.0.6.0.zip
http://technet.escenic.com/downloads/release/53/poll-2.1.3.0.zip
http://technet.escenic.com/downloads/release/53/xml-editor-dist-2.1.0.0.zip
"

tomcat_download=http://ftp.nsysu.edu.tw/Apache/tomcat/tomcat-6/v6.0.32/bin/apache-tomcat-6.0.32.tar.gz

dir_list="
/etc/escenic/engine/common
/opt/escenic
/var/cache/escenic
/var/crash/escenic
/var/lib/escenic
/var/log/escenic
/var/run/escenic
/var/spool/escenic/migration
"
function make_dir()
{
    if [ ! -d $1 ]; then
        mkdir -p $1
    fi
}

for el in $dir_list; do
    make_dir $el
done

function make_ln()
{
    if [ -e $1 -a ! -h $(basename $1) ]; then
        ln -s $1
    elif [ ! -e $1 ]; then
        print "Tried to make a symlink to $1, but it doesn't exist"
        exit 1
    fi
}

# TODO download documentation to
# /usr/share/doc/escenic/content-engine-<version>/

function download_escenic_components()
{
    if [ $ece_software_setup_completed -eq 1 ]; then
        return
    fi
    
    print "Downloading Escenic software from technet.escenic.com ..."
    
    cd $download_dir
    for el in $technet_download_list; do
        if [ -e $(basename $el) ]; then
            continue
        fi
        
        wget --continue \
            --http-user $technet_user \
            --http-password $technet_password \
            $el \
            1>>$log 2>>$log
    done

}

function install_common_os_packages()
{
    print "Installing 3rd party packages needed by $(basename $0) ..."

    if [ $on_debian_or_derivative -eq 1 ]; then
        # Ubuntu doesn't have git (!) but only git-core.
        if [ $on_ubuntu -eq 1 ]; then
            git_package=git-core
        else
            git_package=git
        fi
        
        apt-get install -y \
            curl \
            $git_package \
            wget \
            1>>$log 2>>$log
    fi

    assert_pre_prequesite curl
    assert_pre_prequesite wget
    assert_pre_prequesite git
}

make_dir $ece_directories

function set_up_assembly_tool()
{
    print "Setting up the Assembly Tool ..."
    
    make_dir /opt/escenic/assemblytool/
    cd /opt/escenic/assemblytool/
    
    if [ -e $download_dir/assemblytool*zip ]; then
        unzip -u $download_dir/assemblytool*zip \
            1>>$log 2>>$log
        mv $download_dir/assemblytool*zip /tmp/
    fi

    # adding an instance layer to the Nursery configuration
    cp -r /opt/escenic/engine/siteconfig/bootstrap-skeleton \
        /opt/escenic/assemblytool/conf
    cd /opt/escenic/assemblytool/conf/
    cp -r layers/host layers/instance
    cat > layers/instance/Files.properties <<EOF
\$class=neo.nursery.FileSystemDepot
fileSystemRoot = /etc/escenic/engine/instance/\${com.escenic.instance}/
EOF
    echo "" >> Nursery.properties
    echo "layer.06 = /layers/instance/Layer" >> Nursery.properties
    echo "come here" > /tmp/tkj
    
    # set up which plugins to use
    cd /opt/escenic/assemblytool/
    make_dir plugins
    cd plugins
    find ../../ -maxdepth 1 -type d | \
        grep -v assemblytool | \
        while read directory; do
        if [ $directory = "../../" ]; then
            continue
        fi
        
          # nuisance to get the community engine, but not the engine
        if [ $(echo $directory | grep engine | wc -l) -gt 0 ]; then
            if [ $(echo $directory | grep community | wc -l) -lt 1 ]; then
                continue
            fi
        fi
        
        make_ln $directory
    done

    cd /opt/escenic/assemblytool/
    ant -q initialize \
        1>>$log 2>>$log
    cat assemble.properties | \
        sed 's/#\ engine.root\ =\ \./engine.root=\/opt\/escenic\/engine/g' \
        > assemble.properties.tmp
    mv assemble.properties.tmp assemble.properties

    cat assemble.properties | \
        sed 's/\#\# plugins\ =\ \/path\/to\/plugins/plugins=\/opt\/escenic\/assemblytool\/plugins/g' \
        > assemble.properties.tmp
    mv assemble.properties.tmp assemble.properties
}

function set_up_engine_and_plugins()
{
    if [ $ece_software_setup_completed -eq 1 ]; then
        return
    fi
    
    print "Setting up the Escenic Content Engine & its plugins ..."

    make_dir /opt/escenic
    cd /opt/escenic/

    if [ ! -d engine-* ]; then
        unzip -u $download_dir/engine*.zip \
            1>>$log 2>>$log
        if [ -h engine ]; then
            rm engine
        fi
    
        ln -s engine-* engine
        mv $download_dir/engine*.zip /tmp
    else
        debug "engine-<version> is already there, skipping to next step."
    fi
    
    # now, there's only plugins left in the download dir
    # we extract them in /opt/escenic as we want to re-use
    # them between minor updates of ECE.
    cd /opt/escenic/
    for el in $download_dir/*.zip; do
        unzip -u $el \
            1>>$log 2>>$log
    done

    ece_software_setup_completed=1
}

function set_up_ece_scripts()
{
    print "Setting up the ece Unix scripts ..." 

    cd $download_dir
    if [ -d ece-scripts ]; then
        (cd ece-scripts
            git pull 1>>$log 2>>$log)
    else
        git clone git://github.com/skybert/ece-scripts.git \
            1>>$log 2>>$log
    fi
    
    cp -r ece-scripts/usr/* /usr/
    cp -r ece-scripts/etc/* /etc/

    # add init.d to the default runlevels, support at least
    # RedHat/chekcconfig and Debian/update-rc.d
}

function set_up_ecedb()
{
    print "Setting up the ECE database schema ..."

    make_dir /opt/escenic/engine/plugins
    cd /opt/escenic/engine/plugins
    
    find ../../ -maxdepth 1 -type d | \
        grep -v assemblytool | \
        while read directory; do
        if [ $directory = "../../" ]; then
            continue
        fi
        
          # nuisance to get the community engine, but not the engine
        if [ $(echo $directory | grep engine | wc -l) -gt 0 ]; then
            if [ $(echo $directory | grep community | wc -l) -lt 1 ]; then
                continue
            fi
        fi
        
        ln -s $directory
    done
    
    bash /usr/sbin/drop-and-create-ecedb \
        1>>$log 2>>$log
    cd ~/
    rm -rf /opt/escenic/engine/plugins
}

function set_up_basic_nursery_configuration()
{
    print "Setting up the basic Nursery configuration ..."
    
    cp -r /opt/escenic/engine/siteconfig/config-skeleton/* \
        /etc/escenic/engine/common/
    cp -r /opt/escenic/engine/security/ \
        /etc/escenic/engine/common/

    make_dir /etc/escenic/engine/instance

    for el in /opt/escenic/assemblytool/plugins/*; do
        if [ ! -d $el/misc/siteconfig/ ]; then
            continue
        fi

        cp -r $el/misc/siteconfig/* /etc/escenic/engine/common/
        
    done

    cat > /etc/escenic/engine/common/ServerConfig.properties <<EOF
databaseProductName=MySQL
filePublicationRoot=/var/lib/escenic/engine/
webPublicationRoot=http://$HOSTNAME:${appserver_port}/
EOF
    cat > /etc/escenic/engine/common/neo/io/managers/ContentManager.properties <<EOF
readConnector=/connector/ReadConnector
updateConnector=/connector/UpdateConnector
EOF

    file=/etc/escenic/engine/common/com/escenic/community/CommunityEngine.properties
    cat $file | \
        sed 's/jdbc\/ecome/jdbc\/ECE_UPDATE_DS/g' \
        > $file.tmp
    mv $file.tmp $file
}

function set_up_instance_specific_nursery_configuration()
{
    for el in /etc/escenic/engine/instance/*; do
       i=$(( i + 1 ))
       if [ $(basename $el) = $instance_name ]; then
           rmi_port="8${i}23"
           echo "port=$rmi_port" > $el/RMI.properties
       fi
    done

    nursery_context=neo/io/managers/HubConnectionManager.properties
    file=/etc/escenic/engine/instance/$instance_name/$nursery_context
    make_dir $(dirname $file)
    
    # we don't touch it if the file already exists.
    if [ ! -e $file ]; then
        echo "hostname=$HOSTNAME" >> $file
    fi
    
}

function set_up_proper_logging_configuration()
{
    print "Setting up proper log4j & Java logging configuration ..."
    
    cat > /etc/escenic/engine/common/trace.properties <<EOF
log4j.rootLogger=ERROR, ECELOG
log4j.appender.ECELOG=org.apache.log4j.DailyRollingFileAppender
log4j.appender.ECELOG.File=/var/log/escenic/\${escenic.server}-messages
log4j.appender.ECELOG.layout=org.apache.log4j.PatternLayout
log4j.appender.ECELOG.layout.ConversionPattern=%d %5p [%t] %x (%c) %m%n
EOF
    cd $tomcat_base/lib/
    make_ln /etc/escenic/engine/common/trace.properties
    ln -sf trace.properties log4j.properies

    cat > $tomcat_base/conf/logging.properties <<EOF
handlers = 1catalina.org.apache.juli.FileHandler, 2localhost.org.apache.juli.FileHandler, java.util.logging.ConsoleHandler, 6localhost.org.apache.juli.FileHandler

.handlers = 1catalina.org.apache.juli.FileHandler, java.util.logging.ConsoleHandler

1catalina.org.apache.juli.FileHandler.level = FINE
1catalina.org.apache.juli.FileHandler.directory = \$\{catalina.base\}/logs
1catalina.org.apache.juli.FileHandler.prefix = catalina.

2localhost.org.apache.juli.FileHandler.level = FINE
2localhost.org.apache.juli.FileHandler.directory = \$\{catalina.base\}/logs
2localhost.org.apache.juli.FileHandler.prefix = localhost.

java.util.logging.ConsoleHandler.level = FINE
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter

6localhost.org.apache.juli.FileHandler.level = FINE
6localhost.org.apache.juli.FileHandler.directory = /var/log/escenic
6localhost.org.apache.juli.FileHandler.prefix = solr.

org.apache.solr.level=INFO
org.apache.solr.handlers=6localhost.org.apache.juli.FileHandler

org.apache.catalina.core.ContainerBase.[Catalina].[localhost].level = INFO
org.apache.catalina.core.ContainerBase.[Catalina].[localhost].handlers = 2localhost.org.apache.juli.FileHandler

EOF
}

# The function accepts the following parameters:
# $1 is the property
# $2 is the value
#
# The function will set these for the current instance's ece.conf. If
# the value already is set, it will replace it with this one.
function set_ece_instance_conf()
{
    conf_file=/etc/escenic/ece-$instance_name.conf
    
    if [ -r $conf_file ]; then
        if [ $(grep $1 $conf_file | wc -l) -gt 0 ]; then
          # TODO update existing values of the property instead of
          # removing & appending it.
            cat $conf_file | grep -v ^$1 > $conf_file.tmp
            mv $conf_file.tmp $conf_file
        fi
    fi
    
    echo "$1=$2" >> $conf_file
}

# Installs third party packages needed by the ECE (i.e. Java related).
# Also see install_common_os_packages for packages common to all
# servers in the architecture.
function install_ece_third_party_packages
{
    print "Installing 3rd party packages needed by ECE ..."
    
    if [ $on_debian_or_derivative -eq 1 ]; then

        if [ $on_ubuntu -eq 1 ]; then
            echo "deb http://archive.canonical.com/ $(lsb_release -s -c) partner" \
                >> /etc/apt/sources.list.d/escenic.list
        fi
        
        apt-get update \
            1>>$log 2>>$log

        echo "sun-java6-jdk shared/accepted-sun-dlj-v1-1 boolean true" | \
            debconf-set-selections
        
        apt-get --asume-yes install \
            ant \
            ant-contrib \
            ant-optional \
            libapr1 \
            libtcnative-1 \
            libmysql-java \
            memcached \
            maven2 \
            sun-java6-jdk \
            wget \
         1>>$log 2>>$log
    fi
    
    for el in ant mvn java; do
        assert_pre_prequesite $el
    done
}

function set_up_app_server
{
    print "Setting up the application server ..."
    print "On which ports do you wish to run the app server on?"
    print "Press ENTER to accept the default (port 8080, shutdown port 8005)"
    print "Or enter: <port> <shutdown port>, e.g.: '8180 8105'"
    echo -n "Your choice [8080 8005]> "
    read user_ports

    if [ -z "$user_ports" ]; then
        appserver_port=8080
        shutdown_port=8005
    else
        appserver_port=$(echo $user_ports | cut -d' ' -f1)
        shutdown_port=$(echo $user_ports | cut -d' ' -f2)
    fi

    print "Another question: Where does the database run?"
    print "Press ENTER to accept the default ($HOSTNAME:3306)"
    print "Or enter: <host>:<port>, e.g.: 'db1:3306'"
    echo -n "Your choice [$HOSTNAME:3306]> "
    read user_database

    if [ -z "$user_database" ]; then
        db_host=$HOSTNAME
        db_port=3306
    else
        db_host=$(echo $user_database | cut -d':' -f1)
        db_port=$(echo $user_database | cut -d':' -f2)
    fi
    
    print "Last question: Where does the search instance run?"
    print "Press ENTER to accept the default ($HOSTNAME:8080)"
    print "If you're in doubt, just press ENTER :-)"
    print "Or enter: <host>:<port>, e.g.: 'db1:3306'"
    echo -n "Your choice [$HOSTNAME:8080]> "
    read user_search

    if [ -z "$user_search" ]; then
        search_host=$HOSTNAME
        search_port=8080
    else
        search_host=$(echo $user_search | cut -d':' -f1)
        search_port=$(echo $user_search | cut -d':' -f2)
    fi
    
    cd $download_dir
    wget --continue $tomcat_download \
        1>>$log 2>>$log
    
    cd /opt/
    
    tar xzf $download_dir/apache-tomcat*.tar.gz
    ln -sf apache-tomcat* tomcat
    
    tomcat_base=/opt/tomcat-${instance_name}
    make_dir $tomcat_base

    cp -r /opt/apache-tomcat*/conf/ $tomcat_base
    for el in bin escenic/lib lib work logs temp webapps; do
        make_dir $tomcat_base/$el
    done

    set_ece_instance_conf tomcat_base $tomcat_base   
    set_ece_instance_conf tomcat_home /opt/tomcat   
   
    cd $tomcat_base/lib
    make_ln $jdbc_driver

    cat $tomcat_base/conf/catalina.properties | \
        sed 's/common.loader=/common.loader=\$\{catalina.base\}\/escenic\/lib\/\*\.jar\,/g' \
        > $tomcat_base/conf/catalina.properties.tmp
    mv $tomcat_base/conf/catalina.properties.tmp $tomcat_base/conf/catalina.properties
    
    cat > $tomcat_base/conf/server.xml <<EOF
<?xml version='1.0' encoding='utf-8'?>
<Server port="$shutdown_port" shutdown="SHUTDOWN">
  <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />
  <Listener className="org.apache.catalina.core.JasperListener" />
  <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />
  <Listener className="org.apache.catalina.mbeans.ServerLifecycleListener" />
  <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />

  <GlobalNamingResources>
    <Resource name="UserDatabase"
              auth="Container"
              type="org.apache.catalina.UserDatabase"
              description="User database that can be updated and saved"
              factory="org.apache.catalina.users.MemoryUserDatabaseFactory"
              pathname="conf/tomcat-users.xml" />
    <Resource
        name="jdbc/ECE_READ_DS"
        auth="Container"
        type="javax.sql.DataSource"
        maxActive="400"
        maxIdle="8"
        maxWait="2000"
        initialSize="20"
        username="ece5user"
        password="ece5password"
        driverClassName="com.mysql.jdbc.Driver"

url="jdbc:mysql://localhost:3306/ece5db?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;characterSetResults=UTF-8"
        removeAbandoned="true"
        removeAbandonedTimeout="120"
        logAbandoned="true"
        testOnBorrow="false"
        testOnReturn="false"
        timeBetweenEvictionRunsMillis="60000"
        numTestsPerEvictionRun="5"
        minEvictableIdleTimeMillis="30000"
        testWhileIdle="true"
        validationQuery="select now()"
        />
    <Resource
        name="jdbc/ECE_UPDATE_DS"
        auth="Container"
        type="javax.sql.DataSource"
        maxActive="100"
        maxIdle="8"
        maxWait="2000"
        initialSize="20"
        username="ece5user"
        password="ece5password"
        driverClassName="com.mysql.jdbc.Driver"
        url="jdbc:mysql://localhost:3306/ece5db?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;characterSetResults=UTF-8"
        removeAbandoned="true"
        removeAbandonedTimeout="120"
        logAbandoned="true"
        testOnBorrow="false"
        testOnReturn="false"
        timeBetweenEvictionRunsMillis="60000"
        numTestsPerEvictionRun="5"
        minEvictableIdleTimeMillis="30000"
        testWhileIdle="true"
        validationQuery="select now()"
        />
  </GlobalNamingResources>

  <Service name="Catalina">
    <Connector port="${appserver_port}"
               protocol="HTTP/1.1" 
               connectionTimeout="20000" 
               URIEncoding="UTF-8"
               redirectPort="8543" />
    <Engine name="Catalina" defaultHost="localhost" jvmRoute="jvm1">
      <Valve className="org.apache.catalina.valves.AccessLogValve"
             prefix="access."
             suffix=".log"
             pattern="common"/>
      <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
             resourceName="UserDatabase"/>
      <Host name="localhost"
            appBase="webapps"
            unpackWARs="true"
            autoDeploy="true"
            xmlValidation="false"
            xmlNamespaceAware="false">
      </Host>
    </Engine>
  </Service>
</Server>

EOF
    cat > $tomcat_base/conf/context.xml <<EOF
<?xml version='1.0' encoding='utf-8'?>
<Context>

  <WatchedResource>WEB-INF/web.xml</WatchedResource>

  <ResourceLink
      global="jdbc/ECE_READ_DS"
      name="jdbc/ECE_READ_DS"
      type="javax.sql.DataSource"/>
  
  <ResourceLink
      global="jdbc/ECE_UPDATE_DS"
      name="jdbc/ECE_UPDATE_DS"
      type="javax.sql.DataSource"/>
  
  <Environment
      name="escenic/indexer-webservice"
      value="http://localhost:${appserver_port}/indexer-webservice/index/"
      type="java.lang.String"
      override="false"/>

  <Environment
      name="escenic/index-update-uri"
      value="http://${search_host}:${search_port}/solr/update/"
      type="java.lang.String"
      override="false"/>

  <Environment
      name="escenic/solr-base-uri"
      value="http://${search_host}:${search_port}/solr/"
      type="java.lang.String"
      override="false"/>

  <Environment
      name="escenic/head-tail-storage-file"
      value="/var/lib/escenic/engine/head-tail.index"
      type="java.lang.String"
      override="false"/>

  <Environment
      name="escenic/failing-documents-storage-file"
      value="/var/lib/escenic/engine/failures.index"
      type="java.lang.String"
      override="false"/>

</Context>
EOF

}

# last, give the control back to the ECE user & group 
function set_correct_permissions()
{
    print "Setting correct permissions on all ECE related directories ..."

    if [ $(grep $ece_user /etc/passwd | wc -l) -lt 1 ]; then
        # TODO add support for useradd
        adduser $ece_user
    fi
    if [ $(grep $ece_group /etc/group | wc -l) -lt 1 ]; then
        addgroup $ece_group
    fi

    for el in $dir_list; do
        if [ -d $el ]; then
            chown -R ${ece_user}:${ece_group} $el
        fi
    done
    
    if [ -e $tomcat_base ]; then
        chown -R ${ece_user}:${ece_group} $tomcat_base
    fi
}

function print_status_and_next_steps()
{
    # su - $ece_user -c "ece versions" 1>>$log 2>>$log

    now=`date +%s`
    started=`stat -c %Y $pid_file`
    seconds=$(( now - started ))
    days=$(( seconds / ( 60 * 60 * 24 ) ))
    seconds_left=$(( seconds - ( $days * 60 * 60 * 24 ) ))
    hours=$(( seconds_left / ( 60 * 60 ) ))
    seconds_left=$(( seconds_left - ( $hours * 60 * 60 ) ))
    minutes=$(( seconds_left / 60 ))
    seconds_left=$(( seconds_left - $minutes * 60 ))

    print "The basic setup of $instance_name is now completed!"
    echo "o  It took" ${days}d ${hours}h ${minutes}m ${seconds_left}s

    if [ $install_profile_number -eq $PROFILE_CACHE_SERVER ]; then
        print "o  The cache server up and running at http://${HOSTNAME}:80/"
    fi
    
    if [ $install_profile_number -eq $PROFILE_EDITORIAL_SERVER -o \
        $install_profile_number -eq $PROFILE_PRESENTATION_SERVER ]; then
        echo "o  Your app server is running on http://${HOSTNAME}:$appserver_port/"
        echo ""
        versions="ece -i $instance_name -t $type versions"
        echo "o  You can type '$versions' to see the "
        echo "   Escenic software installed"

        echo ""
        echo "o  You're next steps on ${HOSTNAME} will be:"
        echo "   - Create a new publiation at:"
        echo "    http://$HOSTNAME:${appserver_port}/escenic-admin/pages/publication/new.jsp"
        echo "    You may use the WAR found in:"
        echo "    /opt/escenic/assemblytool/dist/war/${publication_name}.war"
        echo "   - configure the instances you want to be started at boot time"
        echo "     in /etc/default/ece"
        echo "   - include $instance_name in your RMI hub configuration."
    fi
}

function set_up_publication()
{
    publication_name=mypub
    
    print "What name do you wish to give to your first publication?"
    print "Press ENTER to accept ${publication_name}"
    echo -n "Your choice [${publication_name}]> "
    read publication_name

    if [ -z "$publication_name" ]; then
        publication_name=$1
    fi

    print "Setting up the ${publication_name} publication ..."
    make_dir /opt/escenic/assemblytool/publications/
    cd /opt/escenic/assemblytool/publications/
    cp /opt/escenic/engine/contrib/wars/demo-clean.war ${publication_name}.war
    cat > /opt/escenic/assemblytool/publications/${publication_name}.properties <<EOF
name: ${publication_name}
source-war: ${publication_name}.war
context-root: ${publication_name}
EOF

    # TODO create the publication by POSTing to
    # /escenic-admin/do/publication/resource
    # //depot/branches/personal/mogsie/fromscratch/create-publication.sh
}

function check_for_required_downloads()
{
    if [ $ece_software_setup_completed -eq 1 ]; then
        return
    fi
    
    print "Asserting that required downloads succeeded ..."
    required_escenic_packages="engine assemblytool"

    for el in $required_escenic_packages; do
        if [ $(ls $download_dir | \
            grep ${el} | \
            grep -v community | \
            grep -v analysis | \
            grep .zip$ | \
            wc -l) \
            -lt 1 ]; then
            print "Couldn't find $el* in $download_dir"
            exit 1
        fi
    done
}

function set_up_memcached()
{
     # 1) download java library
     # 2) configure PresenationArticle cache for the publication
     # 3) build and re-deploy
    echo "TBD"
}

function start_components()
{
    # TODO might be a hub and indexer too
    # su - $ece_user -c "ece start" 1>>$log 2>>$log
    echo "TBD"
}

function set_up_user_enviornment()
{
    print "Setting up the ${ece_user}'s user Unix environment ..."

     # TODO get this from ece.conf and other magic

    if [ $(grep JAVA_HOME /home/$ece_user/.bashrc | wc -l) -lt 1 ]; then
        echo JAVA_HOME=/usr/lib/jvm/java-6-sun >> /home/$ece_user/.bashrc
    fi
    if [ $(grep JAVA_HOME /root/.bashrc | wc -l) -lt 1 ]; then
        echo JAVA_HOME=/usr/lib/jvm/java-6-sun >> /root/.bashrc
    fi

    if [ $on_debian_or_derivative -eq 1 ]; then
        export JAVA_HOME=/usr/lib/jvm/java-6-sun
    fi

    if [ $(grep bash_completion.d/ece /home/$ece_user/.bashrc | wc -l) -lt 1 ]
    then
        echo ". /etc/bash_completion.d/ece" \
            >> /home/$ece_user/.bashrc
    fi
}

function set_up_solr()
{
    print "Setting up solr ..."
    cp -r  /opt/escenic/engine/solr/conf /etc/escenic/solr
    mkdir -p /var/lib/escenic/solr/
    cd /var/lib/escenic/solr/
    ln -s /etc/escenic/solr conf
}

function un_install_ece()
{
    print "Uninstalling ECE ..."
     # TODO safety, warnings++
    rm -rf /etc/escenic/ \
        /opt/*tomcat* \
        /opt/escenic \
        /var/lib/escenic \
        /var/run/escenic/ \
        /etc/escenic/ \
        /usr/bin/ece \
        /var/log/escenic/;

     # prepare for new install
    mv /tmp/*.zip /tmp/ece-downloads/

}

function stop_conflicting_processes()
{
    print "Stopping conflicting processes ..."
     # TODO this is dirty
    killall java 1>>$log 2>>$log
}

function set_up_varnish()
{
    print "Setting up Varnish to match your environment ..."
    /etc/init.d/varnish stop 1>>$log 2>>$log

    file=/etc/default/varnish
    cat $file | \
        sed 's/6081/80/g' \
        > $file.tmp
    mv $file.tmp $file

    cat > /etc/varnish/default.vcl <<EOF
/* IPs that are allowed to access the administrative pages/webapps. */
acl staff {
  "localhost";
}

/* The IP of the Adactus/Mobilize server */
acl adactus {
  "203.33.232.216";
}
EOF

    for el in $backend_servers; do
        appserver_host=$(echo $el | cut -d':' -f1)
        appserver_port=$(echo $el | cut -d':' -f2)

        cat >> /etc/varnish/default.vcl <<EOF
backend $appserver_host {
  .host = "$appserver_host";
  .port = "$appserver_port";
}
EOF
    done

    cat >> /etc/varnish/default.vcl <<EOF
/* The client director gives us session stickiness based on client
 * IP. */
director webdirector client {
EOF
    for el in $backend_servers; do
        appserver_host=$(echo $el | cut -d':' -f1)
        cat >> /etc/varnish/default.vcl <<EOF
  {
     .backend = $appserver_host;
     .weight = 1;
  }
EOF
    done

    cat >> /etc/varnish/default.vcl <<EOF
}
EOF

    cat >> /etc/varnish/default.vcl <<EOF
sub vcl_recv {
  if (!client.ip ~ staff &&
      (req.url ~ "^/escenic" ||
       req.url ~ "^/studio" ||
       req.url ~ "^/webservice" ||
       req.url ~ "^/escenic-admin")) {
     error 405 "Not allowed.";
  }

  /* Only Adactus/Mobilize is allowed to access the /binary context
   * which contains all the full quality video files. */
  if (!client.ip ~ adactus && req.url ~ "^/binary") {
    error 405 "Not allowed.";
  }

  set req.backend = webdirector;

  if (req.url ~ "\.(png|gif|jpg|css|js)$" || req.url == "/favicon.ico") { 
    remove req.http.Cookie;
  }
}

 /* Called when content is fetched from the backend. */
sub vcl_fetch {
  /* Remove cookies from these resource types and cache them for a
   * long time */
  if (req.url ~ "\.(png|gif|jpg|css|js)$" || req.url == "/favicon.ico") { 
    set beresp.ttl = 5h;
    remove beresp.http.Set-Cookie;
  }
}

sub vcl_deliver {
  /* Adds debug header to the result so that we can easily see if a
   * URL has been fetched from cache or not.
   */
  if (obj.hits > 0) {
    set resp.http.X-Cache = "HIT #" + obj.hits;
  }
  else {
    set resp.http.X-Cache = "MISS";
  }

  set resp.http.X-Cache-Backend = req.backend;
}
EOF
    /etc/init.d/varnish start 1>>$log 2>>$log
}

PROFILE_ALL_IN_ONE=1
PROFILE_CACHE_SERVER=5
PROFILE_DB_SERVER=4
PROFILE_EDITORIAL_SERVER=2
PROFILE_PRESENTATION_SERVER=3
PROFILE_RMI_HUB=6
PROFILE_SEARCH_SERVER=7

function read_user_input()
{
    echo "Hi, which server profile do you wish to install?"
    echo ""
    echo "Select 1-7 and press ENTER"
    echo ""
    echo -n "  $PROFILE_ALL_IN_ONE - The full stack on one host. "
    echo "Suitable for development and"
    echo "      test environments (cache, ECE, assembly host & database)."
    echo -n "  $PROFILE_EDITORIAL_SERVER - Editorial (publication) server "
    echo "(ECE, assembly host)."
    echo -n "  $PROFILE_PRESENTATION_SERVER - Presentation server "
    echo "(ECE, memcached)."
    echo "  $PROFILE_DB_SERVER - Database server."
    echo -n "  $PROFILE_CACHE_SERVER - Cache server "
    echo "(cache & web server)."
    echo "  $PROFILE_RMI_HUB - RMI hub."
    echo -n "  $PROFILE_SEARCH_SERVER - Standalone search instance "
    echo "(solr + indexer-webapp)."
    echo ""
    echo -n "Your choice [1]> "
    read install_profile_number
    
    if [ -z "$install_profile_number" ]; then
        install_profile_number=$PROFILE_ALL_IN_ONE
    fi
    
}

function common_pre_install()
{
    if [ -e /etc/debian_version -a -x /usr/bin/dpkg ]; then
        on_debian_or_derivative=1
        on_debian=1
    fi

    if [ $(lsb_release -i | grep Ubuntu | wc -l) -gt 0 ]; then
        on_ubuntu=1
    fi

    make_dir $download_dir
    stop_conflicting_processes
    install_common_os_packages
    set_up_ece_scripts
}

function assert_pre_prequesite()
{
    if [ $(which $1 | wc -l) -lt 1 ]; then
        print "Please install $1 first and re-run $(basename $0) again"
        exit 1
    fi
}

function install_cache_server()
{
    print "Installing a caching server on $HOSTNAME ..."

    if [ $on_debian_or_derivative -eq 1 ]; then
        curl http://repo.varnish-cache.org/debian/GPG-key.txt 2>>$log | \
            apt-key add - 1>>$log 2>>$log
    fi
    
    if [ $on_debian -eq 1 ]; then
        echo "deb http://repo.varnish-cache.org/debian/ $(lsb_release -s -c) varnish-3.0" >> \
            /etc/apt/sources.list.d/escenic.list
    elif [ $on_ubuntu -eq 1 ]; then
        echo "deb http://repo.varnish-cache.org/ubuntu/ $(lsb_release -s -c) varnish-3.0" \
            >> /etc/apt/sources.list.d/escenic.list
    fi

    if [ $on_debian_or_derivative -eq 1 ]; then
        apt-get update 1>>$log 2>>$log
        apt-get -y install varnish 1>>$log 2>>$log
    fi

    assert_pre_prequesite varnishd

    print "You must now list your backend servers."
    print "Seperate the entries with a space. e.g.: app1:8080 app2:8080."
    print "Press ENTER to accept the default: ${HOSTNAME}:${appserver_port}"
    echo -n "Your choice [${HOSTNAME}:${appserver_port}]> "
    read backend_servers

    if [ -z "$backend_servers" ]; then
        backend_servers="${HOSTNAME}:${appserver_port}"
    fi

    set_up_varnish $backend_servers
}

function install_database_server()
{
    print "Installing the database server on $HOSTNAME ..."

    if [ $on_debian_or_derivative -eq 1 ]; then

        code_name=$(lsb_release -s -c)
        
        supported_code_name=0
        supported_list="lenny squeeze hardy lucid maverick"
        for el in $supported_list; do
            if [ $code_name = $el ]; then
                supported_code_name=1
            fi
        done
        
         # some how, this is to install Percona 5.5
        if [ -e /var/lib/mysql/debian-*.flag ]; then
            rm /var/lib/mysql/debian-*.flag
        fi
        
        if [ $supported_code_name -eq 1 ]; then
            echo "deb http://repo.percona.com/apt ${code_name} main" \
                >> /etc/apt/sources.list.d/escenic.list

            if [ $(apt-key list| grep CD2EFD2A | wc -l) -lt 1 ]; then
                gpg --keyserver hkp://keys.gnupg.net \
                    --recv-keys 1C4CBDCDCD2EFD2A \
                    1>>$log 2>>$log
                gpg -a --export CD2EFD2A | apt-key add - \
                    1>>$log 2>>$log
            fi
            
            apt-get update \
                1>>$log 2>>$log
            apt-get install -y percona-server-server \
                percona-server-client \
                1>>$log 2>>$log
        else
            print -n "The Percona APT repsository "
            print "doesn't have packages for your Debian (or derivative) "
            print "version with code name $code_name. I will use vanilla "
            print "MySQL instead."

            apt-get update \
                1>>$log 2>>$log
            apt-get install -y mysql-server \
                mysql-client \
                libmysql-java \
                1>>$log 2>>$log
        fi
    fi

    assert_pre_prequesite mysql
    
    download_escenic_components
    set_up_engine_and_plugins
    set_up_ecedb
}

# $1 is the default instance name, the calee is responsible for
# setting this.
function ask_for_instance_name()
{
    print "What do you want to call this ECE instance?"
    print "Press ENTER to accept the default instance name, $1."
    echo -n "Your choice [$1]> "
    read instance_name

    if [ -z "$instance_name" ]; then
        instance_name=$1
    fi
    make_dir /etc/escenic/engine/instance/${instance_name}
}

# $1=<default instance name>
# $2=<editorial server=0 | presentation server=1>
function install_ece_instance()
{
    install_ece_third_party_packages
    
    ask_for_instance_name $1
    download_escenic_components
    check_for_required_downloads

    set_up_engine_and_plugins
    set_up_user_enviornment
    set_up_assembly_tool
    set_up_basic_nursery_configuration
    set_up_instance_specific_nursery_configuration
    
    set_up_app_server
    set_up_proper_logging_configuration

    # special treatment for presentation servers
    if [ $2 -eq 1 ]; then
        file=/etc/escenic/ece-${instance_name}.conf
        print "Creating instance specific conf: $file ..."
        cat >> $file <<EOF
deploy_webapp_white_list="escenic-admin ${publication_name}"
EOF
    fi
    
    set_correct_permissions
}

function install_presentation_server()
{
    print "Installing a presentation server on $HOSTNAME ..."

    install_ece_instance "web1" 1
}

function assemble_deploy_and_start_type()
{
    print "Assembling, deploying & starting $instance_name ..."

    # TODO set type
    type=engine
    ece_command="ece -i $instance_name -t $type assemble deploy start"
    su - $ece_user -c "$ece_command" 1>>$log 2>>$log
}

function install_editorial_server()
{
    print "Installing an editorial server on $HOSTNAME ..."

    install_ece_instance "editor1" 0

    # set_up_publication

    assemble_deploy_and_start_type
}

function install_rmi_hub()
{
    print "TBD"
    make_dir /etc/escenic/rmi-hub
    
    cp -r /opt/escenic/engine/contrib/rmi-hub/config/* \
        /etc/escenic/rmi-hub/

    hub_host=$HOSTNAME
    file=/etc/escenic/engine/common
    file=$file/neo/io/managers/HubConnectionManager.properties

    make_dir $(basename $file)
    echo "hub=rmi://${hub_host}:1099/hub/Hub" > $file

    cat > common/io/api/EventManager.properties <<EOF
clientConfiguration=/neo/io/services/HubConnection
pingTime=10000
EOF
    
}

function install_search_instance()
{
    type=search1
    install_ece_instance "search1" 0
    
    file=/etc/escenic/ece-${instance_name}.conf
    print "Creating instance specific conf: $file ..."
    cat >> $file <<EOF
deploy_webapp_white_list="escenic-admin solr indexer-webapp"
EOF

    common_dir=/etc/escenic/engine/common

    # TODO update instead of append
    dir=$common_dir/com/escenic/framework/search/solr
    make_dir dir
    echo "solrServerURI=http://${search_host}:${search_port}/solr" \
        >>  $dir/SolrSearchEngine.properties
    
    dir=$common_dir/com/escenic/webservice/search
    make_dir $dir
    echo "solrURI=http://search1:8280/solr/select" \
        >> $dir/DelegatingSearchEngine.properties

    dir=$common_dir/com/escenic/lucy
    echo "solrURI=http://search1:8280/solr" \
        >> $dir/LucySearchEngine.properties

    dir=$common_dir/com/escenic/forum/search/lucy
    echo "solrURI=http://search1:8280/solr" \
        >> $dir/SearchEngine.properties

    set_up_solr
    assemble_deploy_and_start_type
}

# useful for development and test environments.
function install_all_in_one_environment()
{
    print "Installing an all-in-one environment on $HOSTNAME ..."

    install_database_server
    install_ece_instance "dev1" 0
    install_cache_server
    set_up_solr
    
    type=engine
    assemble_deploy_and_start_type
}

function common_post_install()
{
    print_status_and_next_steps
}

read_user_input
touch $pid_file
print "I'm logging to $log"

common_pre_install


case $install_profile_number in
    $PROFILE_ALL_IN_ONE)
    install_all_in_one_environment
    ;;
    $PROFILE_CACHE_SERVER)
    install_cache_server
    ;;
    $PROFILE_DB_SERVER)
    install_database_server
    ;;
    $PROFILE_EDITORIAL_SERVER)
    install_editorial_server
    ;;
    $PROFILE_PRESENTATION_SERVER)
    install_presentation_server
    ;;
    $PROFILE_RMI_HUB)
    install_rmi_hub
    ;;
    default)
        print "You must select 1-7"
        exit 1
        ;;
esac


common_post_install
