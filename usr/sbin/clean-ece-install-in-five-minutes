#! /usr/bin/env bash

# The goal of this script, is to have an ECE up and running within
# five minutes. The setup the user is getting is suitable for a
# production environment, except for the fact that with this script,
# all ECE components are set up on the same host.

# by tkj@vizrt.com

# run this script as the root user

ece_user=escenic
ece_group=escenic

id="[ece-install]"

function print()
{
    echo $id $@
}

technet_user=`grep technet_user $HOME/.escenicrc 2>/dev/null | cut -d'=' -f2`
technet_password=`grep technet_password $HOME/.escenicrc 2>/dev/null | cut -d'=' -f2`

if [ -z $technet_user -o -z $technet_password ]; then
    print "Be sure to set technet_user and technet_password "
    print "in $HOME/.escenicrc"
    exit 1
fi


technet_download_list="
http://technet.escenic.com/downloads/assemblytool-2.0.2.zip
http://technet.escenic.com/downloads/release/53/analysis-engine-2.3.6.0.zip
http://technet.escenic.com/downloads/release/53/community-engine-3.6.1.0.zip
http://technet.escenic.com/downloads/release/53/dashboard-1.0.0.0.zip
http://technet.escenic.com/downloads/release/53/engine-5.3.1.3.zip
http://technet.escenic.com/downloads/release/53/forum-3.0.0.0.zip
http://technet.escenic.com/downloads/release/53/inpage-1.3.0.0.zip
http://technet.escenic.com/downloads/release/53/lucy-dist-4.1.6.0.zip
http://technet.escenic.com/downloads/release/53/menu-editor-dist-2.0.6.0.zip
http://technet.escenic.com/downloads/release/53/poll-2.1.3.0.zip
http://technet.escenic.com/downloads/release/53/xml-editor-dist-2.1.0.0.zip
"
download_dir=/tmp/ece-downloads/
ece_directories="/var/{run,lib,cache,log,crash}/escenic \
/opt/escenic \
/etc/escenic/engine/common"

tomcat_download=http://ftp.nsysu.edu.tw/Apache/tomcat/tomcat-6/v6.0.32/bin/apache-tomcat-6.0.32.tar.gz
tomcat_port=8080
jdbc_driver=/usr/share/java/mysql.jar

function make_dir()
{
    if [ ! -d $1 ]; then
        mkdir -p $1
    fi
}

# TODO download documentation to
# /usr/share/doc/escenic/content-engine-<version>/

function download_all()
{
    make_dir $download_dir
    cd $download_dir
    for el in $technet_download_list; do
        wget --continue \
            --http-user $technet_user \
            --http-password $technet_password \
            $el
    done

    wget --continue $tomcat_download
}

function install_debian_packages()
{
    apt-get install curl
    
    echo "deb http://repo.percona.com/apt squeeze main" \
        >> /etc/apt/sources.list.d/escenic.list
    curl http://repo.varnish-cache.org/debian/GPG-key.txt | apt-key add -
    echo "deb http://repo.varnish-cache.org/debian/ $(lsb_release -s -c) varnish-3.0" >> \
        /etc/apt/sources.list.d/escenic.list

    gpg --keyserver  hkp://keys.gnupg.net --recv-keys 1C4CBDCDCD2EFD2A
    gpg -a --export CD2EFD2A | apt-key add -
    
    # apt-get update
    apt-get install \
        ant \
        ant-contrib \
        libapr1 \
        libmysql-java \
        memcached \
        maven2 \
        percona-server-client \
        percona-server-server \
        sun-java6-jdk \
        varnish \
        wget

    # TODO later: support for the tomcat package 
    #        tomcat6 \
}

make_dir $ece_directories

function set_up_engine_plugins_and_assembly_tool()
{
    make_dir /opt/escenic/
    cd /opt/escenic/
    unzip $download_dir/engine*.zip
    ln -s engine-* engine
    mv $download_dir/engine*.zip /tmp
    
    make_dir /opt/escenic/assemblytool/
    cd /opt/escenic/assemblytool/
    unzip $download_dir/assemblytool*zip
    mv $download_dir/assemblytool*zip /tmp/

    # now, there's only plugins left in the download dir
    # we extract them in /opt/escenic as we want to re-use
    # them between minor updates of ECE.
    cd /opt/escenic/
    for el in $download_dir/*.zip; do
        unzip $el
    done
    
    cd /opt/escenic/assemblytool/
    make_dir plugins
    cd plugins
    find ../../ -maxdepth 1 -type d | \
        grep -v engine | \
        grep -v assemblytool | \
        while read directory; do
        ln -s $directory
    done
}

function set_up_ece_scripts()
{
    cd $download_dir
    git clone git://github.com/skybert/ece-scripts.git
    cp -r ece-scripts/usr/* /usr/
    cp -r ece-scripts/etc/* /etc/

    # add init.d to the default runlevels, support at least
    # RedHat/chekcconfig and Debian/update-rc.d
}

function set_up_ecedb()
{
    make_dir /opt/escenic/engine/plugins
    cd /opt/escenic/engine/plugins
    ln -s /opt/escenic/forum*
    ln -s /opt/escenic/community-engine*
    bash /usr/sbin/drop-and-create-ecedb
    rm -rf /opt/escenic/engine/plugins
}

function set_up_basic_nursery_configuration()
{
    cp -r /opt/escenic/engine/siteconfig/config-skeleton/* \
        /etc/escenic/engine/common/

    cat > /etc/escenic/engine/common/ServerConfig.properties <<EOF
databaseProductName=MySQL
filePublicationRoot=/var/lib/escenic/engine/
webPublicationRoot=http://$HOSTNAME:${tomcat_port}/
EOF
    cat > /etc/escenic/engine/common/neo/io/managers/ContentManager.properties <<EOF
readConnector=/connector/ReadConnector
updateConnector=/connector/UpdateConnector
EOF
}

function set_up_proper_log4j_configuration()
{
    cat > /etc/escenic/engine/common/trace.properties <<EOF
log4j.rootLogger=ERROR, ECELOG
log4j.appender.ECELOG=org.apache.log4j.DailyRollingFileAppender
log4j.appender.ECELOG.File=/var/log/escenic/${escenic.server}-messages
log4j.appender.ECELOG.layout=org.apache.log4j.PatternLayout
log4j.appender.ECELOG.layout.ConversionPattern=%d %5p [%t] %x (%c) %m%n
EOF
}

function set_up_app_server
{
    cd /opt/
    tar xzf $download_dir/apache-*.tar.gz
    ln -s apache-tomcat* tomcat
    make_dir tomcat/escenic/lib
    
    make_dir /opt/tomcat/lib
    cd /opt/tomcat/lib
    ln -s $jdbc_driver

    cat /opt/tomcat/conf/catalina.properties | \
        sed 's/common.loader=/common.loader=\$\{catalina.base\}\/escenic\/lib\/\*\.jar\,/g' \
        > /opt/tomcat/conf/catalina.properties.tmp
    mv /opt/tomcat/conf/catalina.properties.tmp /opt/tomcat/conf/catalina.properties
    
    cat > /opt/tomcat/conf/server.xml <<EOF
<?xml version='1.0' encoding='utf-8'?>
<Server port="8105" shutdown="SHUTDOWN">
  <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />
  <Listener className="org.apache.catalina.core.JasperListener" />
  <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />
  <Listener className="org.apache.catalina.mbeans.ServerLifecycleListener" />
  <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />

  <GlobalNamingResources>
    <Resource name="UserDatabase"
              auth="Container"
              type="org.apache.catalina.UserDatabase"
              description="User database that can be updated and saved"
              factory="org.apache.catalina.users.MemoryUserDatabaseFactory"
              pathname="conf/tomcat-users.xml" />
    <Resource
        name="jdbc/ECE_READ_DS"
        auth="Container"
        type="javax.sql.DataSource"
        maxActive="400"
        maxIdle="8"
        maxWait="2000"
        initialSize="20"
        username="ece5user"
        password="ece5password"
        driverClassName="com.mysql.jdbc.Driver"

url="jdbc:mysql://localhost:3306/ece5db?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;characterSetResults=UTF-8"
        removeAbandoned="true"
        removeAbandonedTimeout="120"
        logAbandoned="true"
        testOnBorrow="false"
        testOnReturn="false"
        timeBetweenEvictionRunsMillis="60000"
        numTestsPerEvictionRun="5"
        minEvictableIdleTimeMillis="30000"
        testWhileIdle="true"
        validationQuery="select now()"
        />
    <Resource
        name="jdbc/ECE_UPDATE_DS"
        auth="Container"
        type="javax.sql.DataSource"
        maxActive="100"
        maxIdle="8"
        maxWait="2000"
        initialSize="20"
        username="ece5user"
        password="ece5password"
        driverClassName="com.mysql.jdbc.Driver"
        url="jdbc:mysql://localhost:3306/ece5db?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;characterSetResults=UTF-8"
        removeAbandoned="true"
        removeAbandonedTimeout="120"
        logAbandoned="true"
        testOnBorrow="false"
        testOnReturn="false"
        timeBetweenEvictionRunsMillis="60000"
        numTestsPerEvictionRun="5"
        minEvictableIdleTimeMillis="30000"
        testWhileIdle="true"
        validationQuery="select now()"
        />
  </GlobalNamingResources>

  <Service name="Catalina">
    <Connector port="${tomcat_port}"
               protocol="HTTP/1.1" 
               connectionTimeout="20000" 
               URIEncoding="UTF-8"
               redirectPort="8543" />
    <Engine name="Catalina" defaultHost="localhost" jvmRoute="jvm1">
      <Valve className="org.apache.catalina.valves.AccessLogValve"
             prefix="access."
             suffix=".log"
             pattern="common"/>
      <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
             resourceName="UserDatabase"/>
      <Host name="localhost"
            appBase="webapps"
            unpackWARs="true"
            autoDeploy="true"
            xmlValidation="false"
            xmlNamespaceAware="false">
      </Host>
    </Engine>
  </Service>
</Server>

EOF
    cat > /opt/tomcat/conf/context.xml <<EOF
<?xml version='1.0' encoding='utf-8'?>
<Context>

  <WatchedResource>WEB-INF/web.xml</WatchedResource>

  <ResourceLink
      global="jdbc/ECE_READ_DS"
      name="jdbc/ECE_READ_DS"
      type="javax.sql.DataSource"/>
  
  <ResourceLink
      global="jdbc/ECE_UPDATE_DS"
      name="jdbc/ECE_UPDATE_DS"
      type="javax.sql.DataSource"/>
  
  <Environment
      name="escenic/indexer-webservice"
      value="http://localhost:${tomcat_port}/indexer-webservice/index/"
      type="java.lang.String"
      override="false"/>

  <Environment
      name="escenic/index-update-uri"
      value="http://localhost:${tomcat_port}/solr/update/"
      type="java.lang.String"
      override="false"/>

  <Environment
      name="escenic/solr-base-uri"
      value="http://localhost:${tomcat_port}/solr/"
      type="java.lang.String"
      override="false"/>

  <Environment
      name="escenic/head-tail-storage-file"
      value="/var/lib/escenic/engine/head-tail.index"
      type="java.lang.String"
      override="false"/>

  <Environment
      name="escenic/failing-documents-storage-file"
      value="/var/lib/escenic/engine/failures.index"
      type="java.lang.String"
      override="false"/>

</Context>
EOF

}

# last, give the control back to the ECE user & group 
function set_correct_permissions()
{
    if [ $(grep $ece_user /etc/passwd | wc -l) -lt 1 ]; then
        # TODO add support for useradd
        adduser $ece_user
    fi
    if [ $(grep $ece_group /etc/group | wc -l) -lt 1 ]; then
        addgroup $ece_group
    fi
    
    chown -R ${ece_user}:${ece_group} $ece_directories
}

function print_status()
{
    ece versions
}

function print_next_steps()
{
    echo " You must now do: \
* add /opt/tomcat/escenic/lib to common.loader
  in /opt/tomcat/conf/catalina.properties

* add 

"
}

function set_up_test_publication()
{
    make_dir /opt/escenic/assemblytool/publications/
    cp /opt/escenic/engine/contrib/wars/demo-clean.war mypub.war
    cat > /opt/escenic/assemblytool/publications/mypub.properties <<EOF
name: mypub
source-webapp: mypub.war
context-root: mypub
EOF

}


function check_for_pre_requisites()
{
    pre_requisites="
curl
wget
ant
mvn
java
mysql
"
    ok=1
    
    for el in $pre_requisites; do
        if [ $(which $el | wc -l) -lt 1 ]; then
            print "You're missing $el"
            ok=0
        fi
    done

    if [ $ok -eq 0 ]; then
        print "Please install the missing packages before"
        print "running $(basename $0) again."
        exit 1
    fi
}

# if [ -e /etc/debian_version -a -x /usr/bin/dpkg ]; then
#     install_debian_packages
# fi

# check_for_pre_requisites
# download_all
# set_up_engine_plugins_and_assembly_tool
# set_up_basic_nursery_configuration
set_up_ece_scripts
set_up_ecedb
# set_correct_permissions
# set_up_app_server
# set_up_test_publication

# print_status
# print_next_steps

