#! /usr/bin/env bash

# Script for doing various operations on the Escenic Content Engine,
# the RMI hub and the indexer standalone instances. Type "ece help"
# for a complete list of supported operations.
#
# echo comments and suggestions > tkj@vizrt.com


######################################################################
# Script defaults, my be overriden in any of the configration files
######################################################################
verbose=0
force_ipv4=0

######################################################################
# Dear user, don't touch anyting in this script, especially below this
# line :-)
######################################################################
type=engine
instance=default
command=""

type_list="
engine
search
rmi-hub
"

command_list="
applog
assemble
clean
deploy
help
log
outlog
restart
start
status
stop
threaddump
"

common_settings_list="
ece_home
java_home
log_dir
pid_dir
"

hub_required_fields="
ece_server_hostname
rmi_hub_conf
rmi_hub_home
"

engine_required_fields="
appserver
assemblytool_home
cache_dir
ece_home
ece_security_configuration_dir
enable_heap_dump
enable_remote_debugging
enable_remote_monitoring
extract_webapps
is_production
java_home
solr_home
"

indexer_required_fields="
solr_home
appserver
"
####################################################################
# Will exit the ece execution if the last operation failed. While
# failing, it will print the message passed to the function.
####################################################################
function exit_on_error()
{
    if [ $? -eq 1 ]; then
        print $1 "FAILED, exiting :-("
        exit 1
    fi
}

####################################################################
# debug/verbose method
####################################################################
function debug()
{
    if [ $verbose -eq 1 ]; then
        print $@
    fi
}

function print()
{
    echo "$id" $@
}

function log()
{
    echo "$id" `date` $@ 2>/dev/null >> $log_file 
}

function verify_that_directory_and_file_are_writeable()
{
    dir=`dirname $1`
    if [ ! -e $dir ]; then
        print $dir " doesn't exist"
        exit 1
    fi
    if [ ! -w $dir ]; then
        print $dir " isn't writable for user $USER"
        exit 1
    fi

    if [ -e $1 ]; then
        if [ ! -w $1 ]; then
            print $1 "exists, "
            print "but isn't write-able for user $USER"
            print "check the permissions and that $USER is the correct one"
            print "to run "`basename $0`
            exit 1
        fi
    fi
}

####################################################################
# Ensures that all required fields are set. Will report all missing
# required fields before failing.
####################################################################
function ensure_that_required_fields_are_set()
{
    requirements_failed=0
    
    for el in $@; do
        if [ -n "$(eval echo $`echo $el`)" ]; then
            continue
        fi
        
        print "You need to specifiy '$el' in your `basename $0`.conf"
        requirements_failed=1
    done

    if [ $requirements_failed -eq 1 ]; then
        exit 1
    fi
}

function read_conf_file()
{
    for el in $conf_file_location_list; do
        if [ -r $el/$1 ]; then
            debug "found $1 in $el, reading it"
            source $el/$1
            break
        fi
    done
}

function set_common_settings()
{
    # This behaviour can be overridden by specifying a list of
    # locations in the environment variable ECE_CONF_LOCATIONS
    if [ -n "$ECE_CONF_LOCATIONS" ] ; then
        conf_file_location_list=$ECE_CONF_LOCATIONS
    else
        conf_file_location_list="
          `dirname $0`
          /etc/escenic/$type/instance/$instance
          /etc/escenic/$type/host/`echo $HOSTNAME | tr '[A-Z]' '[a-z]'`
          /etc/escenic/$type/common
          /etc/escenic/$type
          /etc/escenic
          `dirname $0`/../etc
        "
    fi

    # main configuration file, may be overridden in the type and
    # instance specific ones.
    read_conf_file `basename $0`.conf

    if [ $instance = "default" ]; then
        log_file=$log_dir/$type.out
        pid_file=$pid_dir/$type.pid
    else
        log_file=$log_dir/$type-$instance.out
        pid_file=$pid_dir/$type-$instance.pid
    fi

    log_file_list="
      $log_dir/messages
      $log_dir/Escenic-error.log
    "
}

function set_type_settings()
{
    # optional: possible to have type specific conf file,
    # will take precedences over the common one.
    read_conf_file `basename $0`-$type.conf
}

function set_instance_settings()
{
    # optional: possible to have instance specific conf files,
    # these will take precedence over the other two
    read_conf_file `basename $0`-$instance.conf
    read_conf_file `basename $0`-$type-$instance.conf

    # at this point in the script flow, we have now read all the
    # possible combinations of conf files (common, type and instance)
    # and can now ensure that required fields are set and apply them.
    if [ $type = "rmi-hub" ]; then
        ensure_that_required_fields_are_set $hub_required_fields
    elif [ $type = "indexer" ]; then
        ensure_that_required_fields_are_set $indexer_required_fields
    elif [ $type = "engine" ]; then
        ensure_that_required_fields_are_set $engine_required_fields
    fi

    # Get a hold of the PID of the process. Although we've got the PID
    # file, we stil get the PID from the OS here as we used it for
    # sanity checking later on, see stop_type().
    if [ $type = "rmi-hub" ]; then
        # we need to be able to differentiate between an ECE instance
        # and an rmi hub, for this we use java.security.policy which
        # the hub doesn't have.
        type_pid=`ps -ef | grep -v java.security.policy | \
            awk "/Djava.rmi.server.hostname=$ece_server_hostname / && \
            !/awk/"' {print $2}'`
    fi
    
    # if type is rmi-hub, we don't' need more configuration.
    if [ $type = "rmi-hub" ]; then
        return
    fi

    # We respect ece_server if it's set in any of the configuration
    # files. If it's not set there, it sets some sensible defaults.
    if [ -z $ece_server ]; then
        if [ $instance = "default" ]; then
            ece_server=${HOSTNAME}
        else
            ece_server=${HOSTNAME}-${instance}
        fi
    fi
    
    # Get a hold of the PID of the process. Although we've got the PID
    # file, we stil get the PID from the OS here as we used it for
    # sanity checking later on, see stop_type().
    type_pid=`ps -ef | awk "/Descenic.server=$ece_server / && !/awk/"' {print $2}'`
    
    # Common options for all ECE installations
    #
    # * escenic.server is to identify the ECE instance, if
    #   instance is set (to something different than default, it's
    #   included in the escenic.server parameter)
    # * solr.home needed for ECE5, but doesn't hurt on an ECE4 system.
    # * java.awt.headless is to avoid potential problems with graphics
    #   handling/generation, causing 0x0 bitmaps etc.
    # * java.security for configuring the Java security framework with ECE.
    ece_args="-Descenic.server=$ece_server\
              -Dsolr.solr.home=$solr_home\
              -Djava.awt.headless=true\
              -Djava.security.auth.login.config=$ece_security_configuration_dir/jaas.config\
              -Djava.security.policy=$ece_security_configuration_dir/java.policy"

    if [ $instance != "default" ]; then
        ece_args=$ece_args" -Dcom.escenic.instance=$instance"
    fi

    if [ $ece_server_hostname ]; then
        ece_args=$ece_args" -Djava.rmi.server.hostname=$ece_server_hostname"
    fi

    if [ $apr_lib_dir ]; then
        ece_args=$ece_args" -Djava.library.path=$apr_lib_dir"
    fi

    if [ $min_heap_size ]; then
        ece_args=$ece_args" -Xms$min_heap_size"
    fi

    if [ $max_heap_size ]; then
        ece_args=$ece_args" -Xmx$max_heap_size"
    fi

    if [ $min_permgen_size ]; then
        ece_args=$ece_args" -XX:PermSize=$min_permgen_size"
    fi

    if [ $max_permgen_size ]; then
        ece_args=$ece_args" -XX:MaxPermSize=$max_permgen_size"
    fi
    
    # settings specific to a production environment
    if [ $is_production -eq 1 ]; then
        ece_args=$ece_args" -server"
    fi
    
    if [ $jvm_encoding ]; then
        ece_args=$ece_args" -Dsun.jnu.encoding=$jvm_encoding"
        ece_args=$ece_args" -Dfile.encoding=$jvm_encoding"
    fi

    if [ $enable_remote_debugging -eq 1 ]; then
        ece_args=$ece_args" -Xdebug -Xnoagent -Djava.compiler=NONE \
                            -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=$remote_debugging_port"
    fi          

    if [ $enable_remote_monitoring -eq 1 ]; then
        ece_args=$ece_args" -Dcom.sun.management.jmxremote"
        ece_args=$ece_args" -Dcom.sun.management.jmxremote.authenticate=false"
        ece_args=$ece_args" -Dcom.sun.management.jmxremote.ssl=false"
        ece_args=$ece_args" -Dcom.sun.management.jmxremote.port=$remote_monitoring_port" 
    fi

    if [ $enable_heap_dump -eq 1 ]; then
        ece_args=$ece_args" -XX:+HeapDumpOnOutOfMemoryError"
        ece_args=$ece_args" -XX:HeapDumpPath=$heap_dump_dir"
    fi

    if [ $force_ipv4 -eq 1 ]; then
        ece_args=$ece_args" -Djava.net.preferIPv4Stack=true"
    fi
    
    # Resin needs some more arguments as its XML parser is not
    # compatible with ECE.
    if [ $appserver = "resin" ]; then
        ece_args="$ece_args\
           -Dorg.xml.sax.driver=org.apache.xerces.parsers.SAXParser
           -Djavax.xml.stream.XMLInputFactory=com.sun.xml.stream.ZephyrParserFactory
           -Djavax.xml.parsers.DocumentBuilderFactory=org.apache.xerces.jaxp.DocumentBuilderFactoryImpl
           -Djavax.xml.parsers.SAXParserFactory=org.apache.xerces.jaxp.SAXParserFactoryImpl
           -Djavax.xml.transform.TransformerFactory=org.apache.xalan.processor.TransformerFactoryImpl"
        debug "resin_home=$resin_home"

    elif [ $appserver = "tomcat" ]; then
        if [ -z $tomcat_base ]; then
            tomcat_base=$tomcat_home
        else
            export CATALINA_BASE=$tomcat_base
        fi
        debug "CATALINA_BASE=$CATALINA_BASE"

        # check for the tomcat6-user Debian package, popular on
        # Debian, Ubuntu and other derivatives to set up multiple
        # tomcat instances , see
        # http://packages.debian.org/stable/tomcat6-user
        if [ ! -x $tomcat_home/bin/catalina.sh ]; then
            if [ -x $tomcat_home/bin/startup.sh ]; then
                tomcat_user_package=true
            fi
        fi
    fi

    # TODO do we need to export ECE_HOME?
    export ECE_HOME=$ece_home
    export JAVA_OPTS="$JAVA_OPTS $ece_args"
    export JAVA_HOME=$java_home
    
    debug ECE_HOME=$ECE_HOME
    debug JAVA_HOME=$JAVA_HOME
    debug JAVA_OPTS=$JAVA_OPTS

}

function sanity_check()
{
    verify_that_directory_and_file_are_writeable $log_file
    verify_that_directory_and_file_are_writeable $pid_file
}

function deploy()
{
    ear=$cache_dir/engine.ear
    if [ ! -e $ear ]; then
        print "$ear does not exist. Did you run '"`basename $0`" assemble'?"
        exit 1
    fi
    
    # extract EAR to a temporary area
    dir=$tmp_dir/`basename $0`-`date +%s`
    (mkdir -p $dir && cd $dir && jar xf $ear)
    exit_on_error "extracting $ear to $dir"

    print "Deploying $ear on $appserver ..."
    
    case $appserver in
        tomcat)
            # We do not want the Escenic jars to share the same
            # classloader folder as tomcat does We thereby want
            # clients to use a separate escenic classloader to avoid
            # strange upgrade problems i.e wrong versions of certain
            # libraries.
            if [ -d $tomcat_base/escenic/lib ]; then
                if [ `ls $tomcat_base/escenic/lib | grep .jar | wc -l` -gt 0 ]; then
                    rm $tomcat_base/escenic/lib/*.jar
                    exit_on_error "removing previous deployed libraries"
                fi
                cp $dir/lib/*.jar \
                    $tomcat_base/escenic/lib  \
                    1>>$log_file \
                    2>>$log_file
                exit_on_error "deploying jar files to $tomcat_base/escenic/lib"
            else
                print "Could not find $tomcat_base/escenic/lib. Exiting."
                print "Also make sure that you have defined this directory in"
                print "  $tomcat_base/conf/catalina.properties"
                print "see sample configuration in the engine distribution"
                print "  contrib/appserver/tomcat/catalina-sample.properties"
                exit 1
            fi
            
            exit_on_error "copying lib files to app server classpath"

            rm -rf $tomcat_base/work/* \
                1>>$log_file \
                2>>$log_file
            
            exit_on_error "removing work files from tomcat"

            for war in $dir/*.war ; do
                if [ -d $tomcat_base/webapps/`basename $war .war` ] ; then
                    rm -rf $tomcat_base/webapps/`basename $war .war` \
                        1>>$log_file \
                        2>>$log_file
                    exit_on_error "removing already deployed escenic wars in $tomcat_base/webapps/"
                fi
            done

            # this scenario is likely when running many minimal
            # instances of tomcat and some of these are not properly
            # initialised.
            if [ ! -d $tomcat_base/webapps ]; then
                print $tomcat_base/webapps "doesn't exist, exiting."
                exit 1
            fi
            
            if [ $extract_webapps ] ; then
                for war in $dir/*.war ; do
                    name=`basename $war .war`
                    (cd $tomcat_base/webapps &&
                        mkdir $name &&
                        cd $name &&
                        jar xf $war \
                            1>>$log_file \
                            2>>$log_file)
                    exit_on_error "extracting $war to $tomcat_base/webapps/"
                done
            else
                cp $dir/*.war \
                    $tomcat_base/webapps/ \
                    1>>$log_file \
                    2>>$log_file
                exit_on_error "copying war files to $tomcat_base/webapps/"
            fi
            ;;
        
        resin)
            if [ ! -d $resin_home/deploy ]; then
                mkdir -p $resin_home/deploy \
                    1>>$log_file \
                    2>>$log_file
            fi
            cp $ear $resin_home/deploy \
                1>>$log_file \
                2>>$log_file
            ;;
        *)
            print "Deployment is only implemented for Resin and Tomcat so far."
            ;;
    esac
}


function start_type()
{
    unset CLASSPATH
    message="Starting the $instance instance of $type on $HOSTNAME ..."
    print $message
    log $message
    
    if [ $type = "rmi-hub" ]; then
        ensure_that_required_fields_are_set $hub_required_fields

        if [ -r $rmi_hub_conf ]; then
            export CLASSPATH=$rmi_hub_conf:$CLASSPATH
        else
            print $rmi_hub_conf "must point to a valid Nursery configuration"
            print "for the rmi-hub, you may copy the one found in"
            print "$ece_home/contrib/rmi-hub/config."
            print "Exiting :-("
            exit 1
        fi
        
        for el in $rmi_hub_home/lib/*.jar; do
            export CLASSPATH=$CLASSPATH:$el
        done

        $java_home/bin/java \
            -Djava.rmi.server.hostname=${ece_server_hostname} \
            neo.nursery.GlobalBus /Initial \
            1>>$log_file \
            2>>$log_file & pid=$!
        
        echo $pid > $pid_file
        exit 0

    elif [ $type = "search" ]; then
        # TODO trim & tun the default parameters for the search
        # instance.
        ensure_that_required_fields_are_set $engine_required_fields
    elif [ $type = "engine" ]; then
        ensure_that_required_fields_are_set $engine_required_fields
    fi

    # indexer and engine are treated the same
    case $appserver in
        tomcat)
            # Tomcat respects JAVA_OPTS set in configure(), so no need
            # to set them here.

            if [ ! -x $tomcat_home/bin/catalina.sh ]; then
                # If using the tomcat6-user Debian package,
                # tomcat_home will only have startup.sh and
                # shutdown.sh
                if [ -x $tomcat_home/bin/startup.sh ]; then
                    tomcat_user_package=true
                else
                    print "$tomcat_home/bin/catalina.sh was not executable"
                    print "unable to start tomcat"
                    exit 1
                fi
            fi

            if [ -z $tomcat_user_package ]; then
              # We call run here to get the log output to the stdout log
              $tomcat_home/bin/catalina.sh run \
                  1>>$log_file \
                  2>>$log_file & pid=$!
            else
                $tomcat_home/bin/startup.sh \
                    1>>$log_file \
                    2>>$log_file & pid=$!
            fi
            ;;
        oc4j)
            export OC4J_JVM_ARGS=$ece_args
            $oc4j_home/bin/oc4j -start\
                1>>$log_file\
                2>>$log_file & pid=$!
            ;;
        resin)
            # Resin has stared insisting on a -J prefix of the -D
            # prefixes :-) Tested with Resin 3.0.25
            resin_ece_args=`echo $ece_args | sed 's/-D/-J-D/g'`
            
            # works for Resin 3.0
            if [ -e $resin_home/bin/wrapper.pl ]; then
                exec perl $resin_home/bin/wrapper.pl \
                    -chdir \
                    -name httpd \
                    -class com.caucho.server.resin.Resin \
                    $resin_ece_args ${1+"$@"} \
                    1>>$log_file \
                    2>>$log_file & pid=$!
            else
                # works for Resin 3.1
                $java_home/bin/java $ece_args \
                    -jar $resin_home/lib/resin.jar \
                    start \
                    1>>$log_file \
                    2>>$log_file & pid=$!
            fi
            ;;
        jboss)
            $jboss_home/bin/run.sh \
                -b 0.0.0.0 \
                -c $jboss_conf \
                1>>$log_file \
                2>>$log_file & pid=$!
            ;;
        *)
            echo "" # extra line feed, because of the echo -n above
            print "No appserver is defined in $ece_conf"
            exit 1
    esac
    
    if [ $pid ]; then
        verify_that_directory_and_file_are_writeable $pid_file
        echo $pid > $pid_file
    fi
    
    exit_on_error $message
}

function stop_type()
{
    message="Stopping the $instance instance of $type on $HOSTNAME ..."

    if [ -n "$type_pid" ]; then
        log $message
        print $message

        if [ -r $pid_file ]; then
            if [ "$type_pid" != "`cat $pid_file`" ]; then
                print "Is running, but was not started with `basename $0`"
                print "system PID $ece_pid differs from the PID in $pid_file"
                print "removing dangling PID file $pid_file. "
                print "In future, be sure to use $0 to start "
                print "and stop your $type"
                kill $type_pid 1>>$log_file 2>>$log_file
                rm $pid_file
                return
            fi
        fi
        
        kill $type_pid \
            1>>$log_file \
            2>>$log_file

        if [ -e $pid_file ]; then
            rm $pid_file \
                1>>$log_file \
                2>>$log_file
        fi
    else
        print "$instance instance of $type on $HOSTNAME is NOT running"
    fi
    
    exit_on_error $message
}

function kill_type()
{
    if [ -n "$type_pid" ]; then
        message="using force to stop the $instance instance of $type on $HOSTNAME ..."
        log $message
        print $message
        kill -9 $type_pid
        if [ -w $pid_file ]; then
            rm $pid_file
        fi
    else
        print "No $instance instance of $type on $HOSTNAME to be killed"
    fi
    
    exit_on_error "kill_type"
}

function assemble()
{
    if [ ! $type = "engine" ]; then
        print "You cannot assemble $type"
        exit 1
    fi

    message="Assembling your EAR file ..."
    print $message
    log $message >> $log_file
    
    cd $assemblytool_home && \
        ant -q ear -DskipRedundancyCheck=true \
        1>>$log_file \
        2>>$log_file
    exit_on_error "$message"

    mkdir -p $ear_cache_dir/
    exit_on_error "creating $ear_cache_dir"

    cp $assemblytool_home/dist/engine.ear $cache_dir
    exit_on_error "copying ear to $ear_cache_dir"

    debug $assemblytool_home/dist/engine.ear "is now ready"
}

function tail_messages_log()
{
    for el in $log_file_list; do
        if [ -r $el ]; then
            print "tailing $el"
            tail -f $el
            break
        fi
    done
}

function tail_out_log()
{
    tail_list=$log_file
    
    if [ $appserver = "tomcat" -a -n $tomcat_user_package ]; then
        tail_list=${tail_list}" "${tomcat_home}/logs/catalina.out
    fi
    
    print "Tailing the system out log $tail_list"
    tail -f $tail_list
}

function tail_app_log()
{
    if [ $type = "rmi-hub" ]; then
        print "There is no application server log for $type"
        exit 1
    fi
    
    if [ $appserver = "tomcat" ]; then
        log_file=$tomcat_base/logs/localhost.`date +%F`.log
    elif [ $appserver = "resin" -a -e $resin_home/log/jvm-default.log ]; then
        log_file=$resin_home/log/jvm-default.log
    else
        print "I don't know where the logs for $appserver are."
        print "Ask support@escenic.com to add support for $appserver in "
        print "tail_app_log()"
        exit 1
    fi
    
    print "Tailing the application server log $log_file"
    tail -f $log_file
}

function make_thread_dump()
{

    if [ -n "$type_pid" ]; then
        print "Thread dump (PID" $type_pid") written to system out log."
        print "Type 'ece -t $type -i default outlog' to see it or view"
        print $log_file "directly."

        if [ -x $java_home/bin/jstack ]; then
            jstack -l $type_pid >> $log_file
        else
            kill -QUIT $type_pid >> $log_file
        fi
    else
        get_status
    fi
}

function set_type_command_and_instance()
{
    next_is_type=0
    next_is_instance=0
    
    for el in $@; do
        if [ $el = "-v" -o $el = "--verbose" ]; then
            verbose=1
            continue
        fi
        if [ $el = "--help" ]; then
            command=help
            continue
        fi

        if [ $next_is_type -eq 1 ]; then
            type=$el
            next_is_type=0
            continue
        fi
        
        if [ $next_is_instance -eq 1 ]; then
            instance=$el
            next_is_instance=0
            continue
        fi
        
        if [ $el = "-t" -o $el  = "--type" ]; then
            next_is_type=1
            continue
        else
            next_is_type=0
        fi

        if [ $el = "-i" -o $el = "--instance" ]; then
            next_is_instance=1
            continue
        else
            next_is_instance=0
        fi
        
        # the only thing left at this point, is the command
        command="$command $el"
    done
}

function clean_up()
{
    if [ $type = "engine" ]; then
        print "Cleaning up generated files in $assemblytool_home ..." 
        cd $assemblytool_home
        ant clean \
            1>>$log_file \
            2>>$log_file
    fi

    tmp_dir_prefix="`basename $0`-"
    if [ `ls  $tmp_dir | grep $tmp_dir_prefix | wc -l` -gt 0 ]; then
        print "Cleaning up $tmp_dir_prefix* files in $tmp_dir ..." 
        rm -r $tmp_dir/$tmp_dir_prefix*
    fi
    
    if [ -e /var/cache/escenic/ -a \
        `ls  /var/cache/escenic | grep ece- | wc -l` -gt 0 ]; then
        print "Cleaning up "`basename $0`" files in /var/cache/escenic/ ..." 
        rm -r /var/cache/escenic/*
    fi
    
}

function set_id()
{
    if [ $instance = "default" ]; then
        id="["`basename $0`"#${type}]"
    else
        id="["`basename $0`"#${type}-${instance}]"
    fi
    
    debug type is $type \
        and command is $command \
        and instance is $instance
}

function get_status()
{
    if [ -z "$type_pid" ]; then
        print "DOWN"
        exit 0
    elif [ -r $pid_file ]; then
        
        if [ "$type_pid" != `cat $pid_file` ]; then
            print "Is running, but was not started with `basename $0`"
            print "system PID $ece_id differs from the PID in $pid_file"
            exit 1
        fi
    else
        print $pid_file "did not exist, "
        print "the ${instance} instance  of ${type} "
        print "hasn't been started properly with `basename $0`"
        exit 1
    fi

    now=`date +%s`
    started=`stat -c %Y $pid_file`
    seconds=$(( now - started ))
    days=$(( seconds / ( 60 * 60 * 24 ) ))
    seconds_left=$(( seconds - ( $days * 60 * 60 * 24 ) ))
    hours=$(( seconds_left / ( 60 * 60 ) ))
    seconds_left=$(( seconds_left - ( $hours * 60 * 60 ) ))
    minutes=$(( seconds_left / 60 ))
    seconds_left=$(( seconds_left - $minutes * 60 ))

    print "UP" ${days}d ${hours}h ${minutes}m ${seconds_left}s
}

function list_versions()
{
    if [ -z "$type_pid" ]; then
        print "$instance instance of $type on $HOSTNAME is NOT running"
        exit 1
    fi
    
    host=localhost
    version_manager=escenic-admin/browser/Global/neo/io/managers/VersionManager
    if [ $appserver != "tomcat" ]; then
        print "Only tomcat is supported right now, "
        print "trying to make an educted guess"
        url=http://$host:8080/$version_manager
    else
        if [ -r $tomcat_base/logs/catalina.out ]; then
            # for tomcat6-user packaged tomcats (and perhaps others)
            out_log=$tomcat_base/logs/catalina.out
        else
            out_log=$log_file
        fi
        
        port=$(grep "INFO: Starting Coyote HTTP/1.1 on http-" \
            $out_log | \
            tail -1 | \
            cut -d'-' -f2
            )
    fi
    
    url=http://$host:$port/$version_manager

    print "Querying the $instance instance of $type on $HOSTNAME"
    print "for its versions (this may take some time) ..."
    wget -O - $url  2>/dev/null | \
        grep "\[\[" | \
        sed 's/\[//g' | \
        sed 's/\]//g' | \
        sed 's/Name\=io/Name\=content-engine/g' | \
        sed 's/Name\=//g' | \
        sed 's/\;\ Version\=/\ /g' | \
        awk -F',' '{for (i = 1; i <= NF; i++) print "   * " $i;}' | \
        # This is a hack since that for some reason, cannot get
        # sub(/^[ \t]+/, "") to work inside the loop for $i, it seems
        # to always operate on the incoming line.
        sed 's/\*\ \ \ /\*/g' | \
        sort
}

set_type_command_and_instance $@
set_id
set_common_settings
set_type_settings
set_instance_settings
sanity_check

function print_help()
{
    echo "Usage: $0 [-t <type>] [-i <instance>] <command>"
    echo ""
    echo "DESCRIPTION"
    echo " -t --type <type>"
    echo "      The following types are available:"
    echo "      engine  - The Escenic Content Engine, this is the default"
    echo "                and is the assumed type if none is specified."
    echo "      search  - A standalone search indexer and solr instance"
    echo "      rmi-hub - The RMI hub responsible for the internal "
    echo "                communication between the ECE instances."
    echo " -i --instance <instance>" 
    echo "      The type instance, such as editor1, web1 or search1"
    echo " -v --verbose"
    echo "      Prints out debug statements, useful for debugging."
    echo ""
    echo "The following commands are available:"
    echo "   applog     the type's app server log"
    echo "   assemble   runs the Assembly Tool *)"
    echo "   clean      removes temporary files created by $0 *)"
    echo "   deploy     deploys the assembled EAR *)"
    echo "   help       prints this help screen"
    echo "   kill       uses force to stop the type"
    echo "   log        the type's Log4J log"
    echo "   outlog     the $id script log (system out log)"
    echo "   restart    restarts the type"
    echo "   start      starts the type"
    echo "   status     checks if the type is running"
    echo "   stop       stops the type"
    echo "   threaddump write a thread dump to standard out (system out log)"
    echo "   versions   lists the ECE component versions"
    echo ""
    echo "*) only applicable if type is 'engine'"
}    

for el in $command; do
    case "$el" in
        start)
            start_type
            ;;
        status)
            get_status
            ;;
        stop)
            stop_type
            ;;
        restart)
            stop_type
            # I've tested this with various values, 8 seconds seems to
            # guarantee that the previous JVM process has stopped
            # properly before starting the new one.
            sleep 8 
            start_type
            ;;
        log)
            tail_messages_log
            ;;
        outlog)
            tail_out_log
            ;;
        applog)
            tail_app_log
            ;;
        kill)
            kill_type
            ;;
        threaddump)
            make_thread_dump
            ;;
        deploy)
            deploy
            ;;
        assemble)
            assemble
            ;;
        clean)
            clean_up
            ;;
        versions)
            list_versions
            ;;
        help)
            print_help
            ;;
        *)
            print "Invalid command: $el :-("
            print_help
            exit 1
    esac
done

exit 0

