#! /usr/bin/env bash

## Script which creates an overview of system information related to
## the specified ECE/EAE/Search instance, example invocation:
##
## $ ece-overview -i web1 | xmllint --format - > /var/www/web1.html

instance=dev1

## 1 : html
## 2 : org
format=html

function create_header() {
  local title="Overview of the $instance instance on $HOSTNAME"
  
  if [ $format == "org" ]; then
    echo "* $title"
    echo "Generated @ $(date)"
    return
  fi

  local header="
<html xmlns=\"http://www.w3.org/1999/xhtml\">
  <head>
    <title>$title @ $(date)</title>
    <style type=\"text/css\">
$(cat ../share/escenic/ece-scripts/vizrt.css)
    </style>
  </head>
  <body>
$(cat ../share/escenic/ece-scripts/html-vizrt-logo-svg.html)
    <h1>$title</h1>
    <p>Generated @ $(date)</p>
    <ul>
"
  echo "$header"
}

function create_footer() {
  if [ $format != "html" ]; then
    return
  fi
  
  local footer="
  </body>
</html>
"
  echo "$footer"
}

function wrap_in_anchor_if_applicable() {
  if [ $format == "org" ]; then
    echo "$@"
    return
  fi

  local result=""
  for el in "$@"; do
    if [[ $el == "/"* || $el == "http://"* || $el == "mysql://"* ]]; then
      result="$result <a href=\"${el}\">$el</a>"
    else
      result="$result $el"
    fi
    
  done
  echo "$result"
}

function print_un_ordered_list_start() {
  if [ $format == "org" ]; then
    echo ""
  elif [ $format == "html" ]; then
    echo "<ul>"
  fi
}

function print_un_ordered_list_end() {
  if [ $format == "org" ]; then
    echo ""
  elif [ $format == "html" ]; then
    echo "</ul>"
  fi
}

function print_list_item() {
  if [ $format == "org" ]; then
    echo "- $@"
  elif [ $format == "html" ]; then
    echo "<li>" \
      "$@" \
      "</li>"
  fi
}

 
function do_create-overview() {
  local data="$(ece -q -i $instance info)"$'\n'
  data="$data $(ece -q -i $instance versions | cut -d'*' -f2-)"
  
  echo "$data" | while read line; do
    if [[ $line == "|->"* ]]; then
      print_list_item $(wrap_in_anchor_if_applicable ${line:3})
    elif [ $(echo $line | cut -d':' -f2- | wc -c) -gt 1 ]; then
      print_list_item $(wrap_in_anchor_if_applicable $line)
    else
      print_un_ordered_list_end
      print_h2_header $(echo $line | cut -d: -f1)
      print_un_ordered_list_start
    fi
    
  done

  list_services_running
  list_hw
}

function print_pre_text() {
  if [ $format == "org" ]; then
    cat <<EOF
#+BEGIN_SRC sh
$@  
#+END_SRC
EOF
  elif [ $format == "html" ]; then
    cat <<EOF
<pre>
$@
</pre>
EOF
  fi
}

function print_h2_header() {
  if [ $format == "org" ]; then
    echo ""
    echo "** $@"
  elif [ $format == "html" ]; then
    echo "<h2>$@</h2>"
  fi
}

function print_h1_header() {
  if [ $format == "org" ]; then
    echo "* $@"
  elif [ $format == "html" ]; then
    echo "<h1>$@</h1>"
  fi
}

function print_p_text() {
  if [ $format == "org" ]; then
    echo "$@"
  elif [ $format == "html" ]; then
    cat <<EOF
<p>
  $@
</p>
EOF
  fi
}

function list_hw() {
  print_h2_header "Disks used on $HOSTNAME"
  print_pre_text "$(df -hT)"
  
  print_h2_header "Memory on $HOSTNAME</h2>"
  print_pre_text "$(free -m)"

  print_h2_header "CPU(s) on $HOSTNAME"
  print_p_text "Number of CPUs:" $(grep "model name" /proc/cpuinfo | wc -l)
  print_pre_text "$(grep "model name" /proc/cpuinfo | sort | uniq)"
}



function list_services_running() {
  cat <<EOF
    </ul>
    <h2>Overview of all server services on $HOSTNAME</h2>
    <pre>
$(netstat -nlp | egrep -v "tcp6|ACC" | grep LISTEN)
    </pre>
EOF

  if [ $(whoami) != "root" ]; then
    echo "<p>Run $(basename $0) as  root to get more details in this listing</p>"
  fi
}

function get_user_options() {
  while getopts ":i:f:" opt; do
    case $opt in
      i)
        instance=${OPTARG}
        ;;
      f)
        format=${OPTARG}
        ;;
      \?)
        echo "Invalid option: -$OPTARG" >&2
        exit 1
        ;;
      :)
        echo "Option -$OPTARG requires an argument." >&2
        exit 1
        ;;
    esac
  done
  
}

get_user_options $@
create_header
do_create-overview
create_footer


