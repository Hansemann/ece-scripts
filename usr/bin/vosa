#!/bin/bash

# /usr/bin/vosa --- command to manage vizrt on-line system-administration
# managed instances of virtual machines.

# vosa list --- list all available virtual machines
# vosa -i /etc/vizrt/vosa/available.d/vm03 enable --- enable a specific vm
# vosa -i /etc/vizrt/vosa/available.d/vm03 disable --- disable a specific vm
# vosa -i /etc/vizrt/vosa/enabled.d/vm03 disable --- disable a vm
# vosa -i ... restart
# vosa -i ... reinstall

instance_dir=
usage=0

### To add an option, add it to the optstring, as defined in getopts, in alphabetical order.
### Also add a function "option-x" where x is the option. $1 will be the option value, if any.
### set any variables needed to default values as globals first.
OPTSTRING=":i:h"

function option-h() {
  usage=1
}

function option-i() {
  instance_dir="${1}"
}


function unknown-option() {
  echo "Unknown option $@"
  usage=1
}

### To add a command, simply define a function with a do_ prefix.
available_dir=$(dirname $0)/../../etc/vizrt/vosa/available.d
available_dir=$(readlink -f ${available_dir})
enabled_dir=$(dirname $0)/../../etc/vizrt/vosa/enabled.d
enabled_dir=$(readlink -f ${enabled_dir})

function do_available() {
  if [ ! -z $instance_dir ] ; then
    echo "Instance cannot be specified"
    usage=1
    return
  fi
  ls -d ${available_dir}/* | grep "/[0-9a-z][-0-9a-z]*$"
}

function do_enabled() {
  if [ ! -z $instance_dir ] ; then
    echo "Instance cannot be specified"
    usage=1
    return
  fi
  ls -d ${enabled_dir}/* | grep "/[0-9a-z][-0-9a-z]*$"
}

function do_enable() {
  if [ -z $instance_dir ] ; then
    echo "Instance must be specified"
    usage=1
    return
  fi
  # check if the instance isn't enabled already
  # check if the instance isn't forcibly disabled
  # check if the instance is available
  # make a symbolic link
  if [ -L ${enabled_dir}/$(basename $instance_dir) ] ; then
    echo "$instance_dir is already enabled"
    exit 1
  fi
  if [ -r ${enabled_dir}/$(basename $instance_dir) ] ; then
    echo "$instance_dir has been forcibly disabled by the presence of the file ${enabled_dir}/$(basename $instance_dir)"
    exit 1
  fi
  if [ ! -d ${available_dir}/$(basename $instance_dir) ] ; then
    echo "$instance_dir is not an available instance"
    exit 1
  fi
  ln -v -s "../available.d/$(basename $instance_dir)" "$enabled_dir" || exit 1
}


commands="$(dirname $0)/../share/vizrt/vosa/commands"


function do_install() {
  if [ -z $instance_dir ] ; then
    echo "Instance is required"
    usage=1
    return
  fi
  # todo:
  # Error checking: if the instance is not enabled, abort
  # If the instance exists and is running, abort. its 'statefile' must be set to 'stopped' for a reinstall to happen.
  # If the instance exists, take a tar.gz backup of the entire image directory
  ${commands}/install.sh "$instance_dir" "$(dirname $0)/../../var/lib/vizrt/vosa/images/$(basename $instance_dir)"
}

function do_start() {
  if [ -z $instance_dir ] ; then
    echo "Instance is required"
    usage=1
    return
  fi
  # todo:
  # Error checking: if the instance is not enabled, abort
  # If the instance exists and is running, abort. its 'statefile' must be set to 'stopped' for a reinstall to happen.
  # If the instance exists, take a tar.gz backup of the entire image directory
  ${commands}/boot.sh "$instance_dir" "$(dirname $0)/../../var/lib/vizrt/vosa/images/$(basename $instance_dir)"
}



function unknown-argument() {
  echo "Unknown argument $@"
  usage=1
}

LASTOPTIND=0

function parseopts() {
local OPTARG
local OPTIND
local opt
local currentconfigdirectory="${@:1:1}"
shift;
while getopts "${OPTSTRING}" opt; do
  case $opt in
    \?)
      unknown-option "-$OPTARG"
      ;;
    *)
      option-$opt "${OPTARG}"
      ;;
  esac
done

LASTOPTIND=$OPTIND

}

parseopts "$PWD" "${@}"

# get rid of all parsed parameters from command line, leaving real arguments
shift $((LASTOPTIND-1))

if [ $usage -eq 0 -a "${#@}" -gt 1 ] ; then
  echo "Only one argument is allowed"
  usage=1
fi

if [ $usage -eq 0 -a "${#@}" -lt 1 ] ; then
  echo "A command must be specified."
  usage=1
fi


# Check if the command
fn="do_$1"
declare > /dev/null -f "$fn" || unknown-argument "$1"
declare > /dev/null -f "$fn" && "$fn"

if [ $usage -eq 1 ] ; then
  echo "Usage: $0 -i instance-dir <command>"
  exit 1;
fi



