#!/bin/bash

# /usr/bin/vosa --- command to manage vizrt on-line system-administration
# managed instances of virtual machines.

# vosa list --- list all available virtual machines
# vosa -i /etc/vizrt/vosa/available.d/vm03 enable --- enable a specific vm
# vosa -i /etc/vizrt/vosa/available.d/vm03 disable --- disable a specific vm
# vosa -i /etc/vizrt/vosa/enabled.d/vm03 disable --- disable a vm
# vosa -i /etc/vizrt/vosa/enabled.d/vm03 install --- creates a new disk image etc.
# vosa -i /etc/vizrt/vosa/enabled.d/vm03 uninstall --- removes the disk image etc.
# vosa -i ... start
# vosa -i ... status --- tells you about the VM, if it's enabled, running, alive, its uptime.

instance_dir=
usage=0

### To add an option, add it to the optstring, as defined in getopts, in alphabetical order.
### Also add a function "option-x" where x is the option. $1 will be the option value, if any.
### set any variables needed to default values as globals first.
OPTSTRING=":i:h"

function option-h() {
  usage=1
}

function option-i() {
  instance_dir="${1}"
  # TODO remove trailing "/" since it's supposed to be a directory.  This script depends on it!
}


function unknown-option() {
  echo "Unknown option $@"
  usage=1
}

### To add a command, simply define a function with a do_ prefix.
available_dir=$(dirname $0)/../../etc/vizrt/vosa/available.d
available_dir=$(readlink -f ${available_dir})
enabled_dir=$(dirname $0)/../../etc/vizrt/vosa/enabled.d
enabled_dir=$(readlink -f ${enabled_dir})


function requires_instance_dir() {
  if [ -z "$instance_dir" ] ; then
    echo "Instance is required"
    usage=1
    return 1
  fi
}
function prohibits_instance_dir() {
  if [ ! -z "$instance_dir" ] ; then
    echo "Instance cannot be specified"
    usage=1
    return 1
  fi
}

function do_available() {
  prohibits_instance_dir && {
    ls -d ${available_dir}/* | grep "/[0-9a-z][-0-9a-z]*$"
  }
}

function do_enabled() {
  prohibits_instance_dir && {
    ls -d ${enabled_dir}/* | grep "/[0-9a-z][-0-9a-z]*$"
  }
}

function do_help() {
  if [ -z "$instance_dir" ] ; then
    cat <<EOF
$0 is a command to manage virtual machines running under
the regime of Vizrt Online System Administration.

"$0 status" gives you a quick overview of the VMs running
on this host.
EOF
    exit 0;
  else
    echo "\"$0 -i $instance_dir status\" to see the status of this instance"
    echo "\"$0 -i $instance_dir install\" to (re)install this image from scratch"
    exit 0;
  fi
}

function do_status() {
  if [ -z "$instance_dir" ] ; then
    for a in $(
      ls -d ${available_dir}/* | grep "/[0-9a-z][-0-9a-z]*$"
    ) ; do 
      really_do_status $a
    done
  else
    really_do_status $instance_dir
  fi
}

function really_do_status () {
    local output
    local avdir="${available_dir}/$(basename $1)"
    local endir="${enabled_dir}/$(basename $1)"
    output=( $avdir )
    if [ ! -d "$avdir" ] ; then
      output=( ${output[@]} unavailable );
    else
      output=( ${output[@]} available );
      if [ ! -L "$endir" ] ; then
        output=( ${output[@]} disabled );
      else
        output=( ${output[@]} enabled );
        local vmdir=$(readlink -f ${avdir}/../../../../../var/lib/vizrt/vosa/images/$(basename $1))
        if [ ! -d "$vmdir" ] ; then
          output=( ${output[@]} uninstalledÂ );
        else
          output=( ${output[@]} installed );
          local statefile=$(readlink -f ${avdir}/../../../../../var/run/vizrt/vosa/$(basename $1).state)
          if [ ! -r "$statefile" ] ; then
            output=( ${output[@]} probably_stopped );
          else
            output=( ${output[@]} $(<$statefile) );
            if [ ! -z "$(<$statefile)" -a $(<$statefile) == "running" ] ; then
              local pidfile="$(dirname $statefile)/$(basename $1).pid"
              if [ -r "$pidfile" ] ; then
                output=( ${output[@]} $(<$pidfile) );
                if ! ps > /dev/null $(<$pidfile) ; then
                  output=( ${output[@]} dead );
                else
                  output=( ${output[@]} alive "$( ps -p "$(<$pidfile)" -o "etime=" )" );
                fi
              fi
            fi
          fi
        fi
      fi
    fi
    echo ${output[@]}
}

function do_enable() {
  requires_instance_dir && {
    # check if the instance is available
    # check if the instance isn't enabled already
    # check if the instance isn't forcibly disabled
    # make a symbolic link
    if [ ! -d ${available_dir}/$(basename $instance_dir) ] ; then
      echo "$instance_dir is not an available instance"
      exit 1
    fi
    if [ -L ${enabled_dir}/$(basename $instance_dir) ] ; then
      echo "$instance_dir is already enabled"
      exit 1
    fi
    if [ -r ${enabled_dir}/$(basename $instance_dir) ] ; then
      echo "$instance_dir has been forcibly disabled by the presence of the file ${enabled_dir}/$(basename $instance_dir)"
      exit 1
    fi
    ln -v -s "../available.d/$(basename $instance_dir)" "$enabled_dir" || exit 1
  }
}

function do_uninstall() {
  requires_instance_dir && {
    # check if the instance is available
    # check if the instance isn't enabled already
    # check if the instance isn't forcibly disabled
    # make a symbolic link
    if [ ! -d ${available_dir}/$(basename $instance_dir) ] ; then
      echo "$instance_dir is not an available instance"
      exit 1
    fi
    if [ ! -L ${enabled_dir}/$(basename $instance_dir) ] ; then
      echo "$instance_dir is not enabled"
      exit 1
    fi
    local status=( $(really_do_status $instance_dir) )
    if [ "${status[6]}" == "alive" ] ; then
      echo "$instance_dir is alive. Stop it first. exiting"
      exit 1
    fi
    if [ "${status[4]}" == "running" ] ; then
      echo "$instance_dir is supposed to be running. Stop it first. Exiting!"
      exit 1
    fi
    local imgdir=$(readlink -f ${instance_dir}/../../../../../var/lib/vizrt/vosa/images/$(basename $instance_dir)/)
    local backupdir="/var/backup/vizrt/vosa/$(basename $instance_dir)"
    local backupparent="/var/backup/vizrt/vosa"
    if [ ! -z "$imgdir" -a -d "$imgdir" ] ; then
      if [ -w "$backupparent" ] ; then
        # todo: rotate a few times?
        rm -rf "$backupdir"
        mv "$imgdir" "$backupparent"
      else
        rm -rf "$imgdir"
      fi
    fi
  }
}


commands="$(dirname $0)/../share/vizrt/vosa/commands"


function do_install() {
  requires_instance_dir && {
    # todo:
    # Error checking: if the instance is not enabled, abort
    # If the instance exists and is running, abort. its 'statefile' must be set to 'stopped' for a reinstall to happen.
    # If the instance exists, take a tar.gz backup of the entire image directory
    ${commands}/install.sh "$instance_dir" "$(dirname $0)/../../var/lib/vizrt/vosa/images/$(basename $instance_dir)"
  }
}

function do_start() {
  requires_instance_dir && {
    # todo:
    # Error checking: if the instance is not enabled, abort
    # If the instance exists and is running, abort. its 'statefile' must be set to 'stopped' for a reinstall to happen.
    # If the instance exists, take a tar.gz backup of the entire image directory
    ${commands}/boot.sh "$instance_dir" "$(dirname $0)/../../var/lib/vizrt/vosa/images/$(basename $instance_dir)"
  }
}



function unknown-argument() {
  echo "Unknown argument $@"
  usage=1
}

LASTOPTIND=0

function parseopts() {
local OPTARG
local OPTIND
local opt
local currentconfigdirectory="${@:1:1}"
shift;
while getopts "${OPTSTRING}" opt; do
  case $opt in
    \?)
      unknown-option "-$OPTARG"
      ;;
    *)
      option-$opt "${OPTARG}"
      ;;
  esac
done

LASTOPTIND=$OPTIND

}

parseopts "$PWD" "${@}"

# get rid of all parsed parameters from command line, leaving real arguments
shift $((LASTOPTIND-1))

if [ $usage -eq 0 -a "${#@}" -gt 1 ] ; then
  echo "Only one argument is allowed"
  usage=1
fi

if [ $usage -eq 0 -a "${#@}" -lt 1 ] ; then
  echo "A command must be specified."
  usage=1
fi


# Check if the command
fn="do_$1"
declare > /dev/null -f "$fn" || unknown-argument "$1"
declare > /dev/null -f "$fn" && "$fn"

if [ $usage -eq 1 ] ; then
  echo "Usage: $0 [-i <instance-dir>] <command>"
  echo "$0 available to get a list of instances"
  exit 1;
fi



